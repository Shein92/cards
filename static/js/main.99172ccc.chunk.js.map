{"version":3,"sources":["ui/Common/Input/Input.module.css","ui/Common/Modal/Module.module.css","ui/Common/Loading/Loading.module.css","ui/Registration/Registration.module.css","ui/Common/Paginator/Paginator.module.css","ui/Login/Login.module.css","ui/PageNotFound/PageNotFound.module.css","ui/Profile/Profile.module.css","ui/ResetPass/ResetPass.module.css","ui/RestorePass/RestorePass.module.css","ui/Common/Button/Button.module.css","ui/Packs/Packs.module.css","ui/Packs/PacksContainer.tsx","ui/Common/Loading/Loading.tsx","ui/Common/NavigationLink/NavigationLink.tsx","api/cardsAPI.ts","bll/app-reducer.ts","bll/profile-reducer.ts","bll/login-reducer.ts","ui/Header/Header.tsx","ui/Routes/routes.ts","ui/Login/Login.tsx","ui/Login/LoginContainer.tsx","ui/PageNotFound/PageNotFound.tsx","api/restorePassAPI.ts","bll/restorePas-reducer.ts","ui/Profile/Profile.tsx","ui/Profile/ProfileContainer.tsx","api/registrationApi.ts","bll/registration-reducer.ts","ui/Registration/Registration.tsx","ui/Registration/RegistrationContainer.tsx","api/resetPassAPI.ts","bll/resetPass-reducer.ts","ui/ResetPass/ResetPassContainer.tsx","ui/RestorePass/RestorePassContainer.tsx","bll/cards-reducer.ts","ui/Common/Paginator/Paginator.tsx","ui/Common/FilterBtn/FilterBtn.tsx","ui/Packs/Packs.tsx","ui/Packs/NewPack/NewPack.tsx","ui/Common/Modal/Modal.tsx","ui/Packs/EditPack/EditPack.tsx","api/getCardAPI.ts","bll/card-reducer.ts","ui/Card/AddNewCard/AddNewCard.tsx","ui/Card/Card.tsx","ui/Card/EditCard/EditCard.tsx","ui/Card/CardContainer.tsx","ui/Main/Main.tsx","App.tsx","serviceWorker.ts","bll/newPass-reducer.ts","bll/store.ts","index.tsx"],"names":["module","exports","idPack","namePack","Loading","className","styles","load","loaderWrapper","NavigationLink","props","to","title","instatce","axios","create","baseURL","withCredentials","authAPI","data","post","delete","cardApi","packName","min","max","sortPacks","page","pageCount","user_id","get","cardsPack","id","put","initialState","isLogged","isLoading","isRequestAuthMe","setIsLoggedAC","value","type","setIsRequestAuthMeAC","setIsLoadingAC","_id","email","name","publicCardPacksCount","NaN","created","updated","verified","rememberMe","error","setupProfileAC","authMeTC","dispatch","then","res","catch","err","setErrorLoginAC","Header","useSelector","state","app","useDispatch","onClick","e","message","Login","React","memo","isError","login","useEffect","formik","useFormik","initialValues","password","validate","values","errors","test","length","onSubmit","style","handleSubmit","inputStyle","placeholder","getFieldProps","color","checked","disabled","LoginContainer","PageNotFound","exact","path","pageNotFound","instance","restorePassAPI","token","resetPasswordToken","answer","isRestored","restoreSendAC","send","Profile","userInfo","profile","ProfileContainer","ans","restorePassword","registerAPI","isRegistred","Registration","registration","repeatPassword","RegistrationContainer","resetPassAPI","from","isReseted","changeResetAnswerAC","text","ResetPassContainer","resetPassword","info","console","log","resetPass","onChange","handleChange","RestorePassContainer","useParams","secondPassword","restorePassTC","restorePass","textAlign","btn","cardPacks","cardPacksTotalCount","maxCardsCount","setCardsAC","cards","getCardsTC","updateCardPackTC","Paginator","totalItemsCount","pageSize","currentPage","portionsSize","onChangePage","onChangeCountOnPage","useState","portionNumber","setPortionNumber","pagesCount","Math","ceil","pages","i","push","portionsCount","leftPortionPageNumber","rightPortionPageNumber","div","filter","p","map","key","select","target","selected","FilterBtn","isArrowDown","cursor","filterUp","setIsArrowDown","filterDown","Packs","userId","isNameOfPackArrowDown","setNameOfPackIsArrowDonw","isNameOfCreatorArrowDown","setIsNameOfCreatorArrowDonw","isQuantityOfCardsArrowDown","setIsQuantityOfCardsArrowDonw","filterById","rows","card","user_name","cardsCount","rating","shots","marginRight","updateHandler","removeCardPack","setCurrentPageAC","count","setCountOnPageAC","NewPack","setModalActive","htmlFor","Modal","modalActive","children","wrapper","active","content","stopPropagation","EditPack","setUpdateModalActive","a","PacksContainer","modalUpdateActive","setFilterById","setValue","check","defaultValue","pushable","step","setMinMaxValueAC","setRemoveCardPack","removeCardPackTC","getCardAPI","packId","question","cardsPack_id","cardId","comments","cardsTotalCount","maxGrade","minGrade","cardAnswer","cardQuestion","setCardAC","getCardTC","AddNewCard","setAddNewCardModal","Card","updateCardName","removeCard","EditCard","setNewCardNameModal","idCard","cardName","CardContainer","addNewCardModal","newCardNameModal","removeCardTC","Main","render","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","newPassword","newState","cardPack","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","unregister"],"mappings":"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","file":"static/js/main.99172ccc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputStyle\":\"Input_inputStyle__2QB-t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Module_wrapper__1Qv7L\",\"active\":\"Module_active__1HbaY\",\"content\":\"Module_content__HdWIa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader-wrap\":\"Loading_loader-wrap__111Av\",\"loader\":\"Loading_loader__VusMC\",\"loaderWrapper\":\"Loading_loaderWrapper__22NCL\",\"load\":\"Loading_load__14d-m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registration\":\"Registration_registration__2o_uK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"div\":\"Paginator_div__31KoU\",\"select\":\"Paginator_select__1ZCfo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__3zKks\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNotFound\":\"PageNotFound_pageNotFound__23x1H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3wQK-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"resetPass\":\"ResetPass_resetPass__BjB4R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"restorePass\":\"RestorePass_restorePass__2Zutx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__3fIXd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cards\":\"Packs_cards__2OgjF\"};","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {Range} from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport {Loading} from \"../Common/Loading/Loading\";\r\nimport {CardPacksType, getCardsTC, removeCardPackTC, setMinMaxValueAC} from \"../../bll/cards-reducer\";\r\nimport Packs from \"./Packs\";\r\nimport {NewPack} from './NewPack/NewPack';\r\nimport styles from \"./Packs.module.css\"\r\nimport {Modal} from \"../Common/Modal/Modal\";\r\nimport {EditPack} from './EditPack/EditPack';\r\nimport {useFormik} from 'formik';\r\n\r\ntype ProfilePropsType = any\r\nlet idPack: string\r\nlet namePack: string\r\n\r\nconst PacksContainer = (props: ProfilePropsType) => {\r\n    const isLogged = useSelector<AppRootStateType, boolean>(state => state.app.isLogged)\r\n    const isLoading = useSelector<AppRootStateType, boolean>(state => state.app.isLoading)\r\n    const cards = useSelector<AppRootStateType, Array<CardPacksType>>(state => state.cards.cardPacks)\r\n    const [modalActive, setModalActive] = useState<boolean>(false)\r\n    const [modalUpdateActive, setUpdateModalActive] = useState<boolean>(false)\r\n    const [filterById, setFilterById] = useState<boolean>(false)\r\n    const [value, setValue] = useState<Array<number>>([0, 20])\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            text: ''\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(getCardsTC(values.text))\r\n        }\r\n    })\r\n\r\n\r\n    const removeCardPack = (id: string) => {\r\n        dispatch(removeCardPackTC(id))\r\n    }\r\n\r\n    const updateHandler = (id: string, name: string) => {\r\n        idPack = id\r\n        namePack = name\r\n        setUpdateModalActive(true)\r\n    }\r\n\r\n    const myPackChangeHandler = (check: boolean) => {\r\n        setFilterById(check)\r\n    }\r\n\r\n    const onChangeRange = (value: Array<number>) => {\r\n        setValue(value)\r\n\r\n    }\r\n\r\n    const rangeHandler = () => {\r\n        dispatch(setMinMaxValueAC(value))\r\n    }\r\n\r\n    if (!isLogged) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/* {isLoading && <Loading/>} */}\r\n            <div className={styles.cards}>\r\n                <div className={\"col s6\"}>\r\n                    <h1>Packs</h1>\r\n                    <div className={\"row\"}>\r\n                        <div className={\"col s2\"}>\r\n                            <button onClick={() => setModalActive(true)} className=\"btn waves-effect waves-light\"\r\n                                    type=\"submit\"\r\n                                    name=\"action\">New Pack\r\n                                <i className=\"material-icons right\">add</i>\r\n                            </button>\r\n                        </div>\r\n                        <div className={\"col s4\"}>\r\n                            <form className=\"col s12\" onSubmit={formik.handleSubmit}>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col s9\">\r\n                                        <input\r\n                                            placeholder={'Text'}\r\n                                            id=\"text\"\r\n                                            name=\"text\"\r\n                                            type=\"text\"\r\n                                            className=\"validate\"\r\n                                            {...formik.getFieldProps('text')}\r\n                                        />\r\n                                        <label htmlFor=\"text\" className=\"active\"/>\r\n                                    </div>\r\n                                    <div className={\"col s2\"}>\r\n                                        <button className=\"btn waves-effect waves-light\" type=\"submit\"\r\n                                                name=\"action\">Search\r\n                                            <i className=\"material-icons right\">search</i>\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                        <div className={\"col s1\"}>\r\n                            <p>\r\n                                <label>\r\n                                    <input\r\n                                        onChange={e => myPackChangeHandler(e.target.checked)}\r\n                                        type=\"checkbox\"\r\n                                        className=\"filled-in\"\r\n                                        name={'uid'}\r\n                                        checked={filterById}\r\n                                    />\r\n                                    <span>My packs</span>\r\n                                </label>\r\n                            </p>\r\n                        </div>\r\n                        <div className={\"col s3\"}>\r\n                            <span>From {value[0]} to {value[1]}</span>\r\n                            <Range min={0} max={20} defaultValue={value} pushable={true} step={1}\r\n                                   onChange={onChangeRange}/>\r\n                        </div>\r\n                        <div className={\"col s2\"}>\r\n                            <button onClick={rangeHandler} className=\"btn waves-effect waves-light\"\r\n                            >Apply\r\n                                <i className=\"material-icons right\">done</i>\r\n                            </button>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <Packs cards={cards} removeCardPack={removeCardPack} updateHandler={updateHandler}\r\n                           filterById={filterById}/>\r\n                </div>\r\n                <Modal modalActive={modalActive} setModalActive={setModalActive}>\r\n                    <NewPack setModalActive={setModalActive}/>\r\n                </Modal>\r\n                <Modal modalActive={modalUpdateActive} setModalActive={setUpdateModalActive}>\r\n                    {idPack && <EditPack id={idPack} name={namePack} setUpdateModalActive={setUpdateModalActive}/>}\r\n                </Modal>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default PacksContainer;\r\n","import React from \"react\";\r\nimport styles from \"./Loading.module.css\"\r\n\r\nexport const Loading = () => {\r\n    return (\r\n        <div className={styles.load}>\r\n            <div className={styles.loaderWrapper}>\r\n                <div className=\"preloader-wrapper big active\">\r\n                    <div className=\"spinner-layer spinner-blue\">\r\n                        <div className=\"circle-clipper left\">\r\n                            <div className=\"circle\"></div>\r\n                        </div><div className=\"gap-patch\">\r\n                            <div className=\"circle\"></div>\r\n                        </div><div className=\"circle-clipper right\">\r\n                            <div className=\"circle\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n// export const Loading = () => {\r\n//     return (\r\n//         <div className={styles.loaderWrap}>\r\n//             <div className={styles.loader}>\r\n//                 <img src={require('./img/Spinner.svg')} alt=\"spinner loading\"/>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ntype NavigationLinkPropsType = {\r\n\tto: string,\r\n\ttitle: string\r\n}\r\n\r\nconst NavigationLink = (props: NavigationLinkPropsType) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<NavLink to={props.to}>{props.title}</NavLink>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default NavigationLink;\r\n","import axios from 'axios'\r\nimport {LoginParamsType} from \"../bll/login-reducer\";\r\nimport {AddCardPackForm} from \"../ui/Packs/NewPack/NewPack\";\r\nimport {EditCardPackType} from \"../ui/Packs/EditPack/EditPack\";\r\nimport {UpdateCardPackType} from \"../bll/cards-reducer\";\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true\r\n}\r\n\r\nconst instatce = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    // baseURL: 'http://localhost:7542/2.0',\r\n    ...settings\r\n})\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instatce.post('/auth/login', data)\r\n    },\r\n\r\n    authMe() {\r\n        return instatce.post('/auth/me', {})\r\n    },\r\n    logout() {\r\n        return instatce.delete('/auth/me', {})\r\n    }\r\n}\r\nexport const cardApi = {\r\n    getCardPack(packName: string = '', min: number = 0, max: number = 100, sortPacks: string = '0updates', page: number = 1, pageCount: number = 10, user_id: string = '') {\r\n        return instatce.get(`/cards/pack?packName=${packName}&min=${min}&max=${max}&sortPacks=${sortPacks}&page=${page}&pageCount=${pageCount}&user_id=${user_id}`)\r\n    },\r\n    addCardPack(data: AddCardPackForm) {\r\n        return instatce.post('/cards/pack', {cardsPack: data})\r\n    },\r\n    removeCardPack(id: string) {\r\n        return instatce.delete(`/cards/pack?id=${id}`)\r\n    },\r\n    updateCardPack(data: UpdateCardPackType) {\r\n        return instatce.put(`cards/pack`, {cardsPack: data})\r\n    }\r\n}\r\n","\r\nconst initialState: AppStateType = {\r\n    isLogged: false,\r\n    isLoading: false,\r\n    isRequestAuthMe: false\r\n}\r\n\r\nexport const appReducer = (state: AppStateType = initialState, action: ActionsType): AppStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGGED\":\r\n            return {...state, isLogged: action.value}\r\n        case \"login/SET-IS-LOADING\":\r\n            return {...state, isLoading: action.value}\r\n        case \"login/SET-IS-REQUEST-AUTH-ME\":\r\n            return {...state, isRequestAuthMe: true}\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n// TYPES\r\nexport type AppStateType = {\r\n    isLogged: boolean\r\n    isLoading: boolean\r\n    isRequestAuthMe: boolean\r\n}\r\n\r\nexport type ActionsType =\r\n    | ReturnType<typeof setIsLoggedAC>\r\n    | ReturnType<typeof setIsRequestAuthMeAC>\r\n    | ReturnType<typeof setIsLoadingAC>;\r\n\r\n\r\n// ACTIONS CREATORS\r\n\r\nexport const setIsLoggedAC = (value: boolean) => {\r\n    return {type: 'login/SET-IS-LOGGED', value} as const\r\n}\r\n\r\nexport const setIsRequestAuthMeAC = (value: boolean) => {\r\n    return {type: 'login/SET-IS-REQUEST-AUTH-ME', value} as const\r\n}\r\n\r\nexport const setIsLoadingAC = (value: boolean) => {\r\n    return {type: 'login/SET-IS-LOADING', value} as const\r\n}\r\n\r\n// THUNKS\r\n","import {authAPI} from \"../api/cardsAPI\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setIsLoadingAC, setIsLoggedAC} from \"./app-reducer\";\r\n\r\nexport type ProfileStateType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date | null\r\n    updated: Date | null\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error: string\r\n}\r\n\r\nexport type ActionsType =\r\n    | ReturnType<typeof setupProfileAC>\r\n    | ReturnType<typeof setIsLoadingAC>\r\n    | ReturnType<typeof setIsLoggedAC>;\r\n\r\nconst initialState: ProfileStateType = {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    publicCardPacksCount: NaN,\r\n    created: null,\r\n    updated: null,\r\n    verified: false,\r\n    rememberMe: false,\r\n    error: ''\r\n}\r\n\r\nexport const profileReducer = (state: ProfileStateType = initialState, action: ActionsType): ProfileStateType => {\r\n    switch (action.type) {\r\n        case 'profile/SET-UP-PROFILE':\r\n            return {...state, ...action.data}\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n//Actions Creators\r\nexport const setupProfileAC = (data: ProfileStateType) => {\r\n    return {type: 'profile/SET-UP-PROFILE', data} as const\r\n}\r\n\r\n// Thunks\r\nexport const authMeTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setIsLoadingAC(true))\r\n    authAPI.authMe()\r\n        .then(res => {\r\n            dispatch(setIsLoadingAC(false))\r\n            dispatch(setupProfileAC(res.data))\r\n            dispatch(setIsLoggedAC(true))\r\n        })\r\n        .catch(err => {\r\n            dispatch(setIsLoadingAC(false))\r\n        })\r\n}\r\n\r\n\r\n// Types\r\n","import {authAPI} from \"../api/cardsAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setupProfileAC} from \"./profile-reducer\";\r\nimport {setIsLoadingAC, setIsLoggedAC, setIsRequestAuthMeAC} from \"./app-reducer\";\r\n\r\nlet initialState: LoginStateType = {\r\n    isLogged: false,\r\n    error: ''\r\n}\r\n\r\nexport const loginReducer = (state: LoginStateType = initialState, action: ActionsType): LoginStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-ERROR-LOGIN':\r\n            return {...state, error: action.error}\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//Actions Creators\r\nconst setErrorLoginAC = (error: string) => {\r\n    return {type: 'login/SET-ERROR-LOGIN', error} as const\r\n}\r\n\r\n\r\n// Thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setIsLoadingAC(true))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            dispatch(setIsLoadingAC(false))\r\n            dispatch(setupProfileAC(res.data))\r\n            dispatch(setIsLoggedAC(true))\r\n            dispatch(setIsRequestAuthMeAC(true))\r\n        })\r\n        .catch(e => {\r\n            dispatch(setIsLoadingAC(false))\r\n            dispatch(setErrorLoginAC(e.message))\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setIsLoadingAC(true))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            dispatch(setIsLoadingAC(false))\r\n            dispatch(setIsLoggedAC(false))\r\n            dispatch(setIsRequestAuthMeAC(false))\r\n        })\r\n        .catch(e => {\r\n            dispatch(setIsLoadingAC(false))\r\n            dispatch(setErrorLoginAC(e.message))\r\n        })\r\n}\r\n\r\n\r\n// Types\r\n\r\nexport type LoginStateType = {\r\n    isLogged: boolean\r\n    error: string\r\n}\r\n\r\n\r\nexport type ActionsType =\r\n    | ReturnType<typeof setIsLoggedAC>\r\n    | ReturnType<typeof setErrorLoginAC>\r\n    | ReturnType<typeof setupProfileAC>\r\n    | ReturnType<typeof setIsRequestAuthMeAC>\r\n    | ReturnType<typeof setIsLoadingAC>;\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n","import React from 'react';\r\nimport NavigationLink from '../Common/NavigationLink/NavigationLink';\r\nimport {card, login, packs, profile, registration, resetPass, restorePass} from '../Routes/routes';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\nimport {logoutTC} from \"../../bll/login-reducer\";\r\n\r\n\r\nconst Header = () => {\r\n\r\n    const isLogged = useSelector<AppRootStateType, boolean>(state => state.app.isLogged)\r\n    const dispatch = useDispatch()\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    return (\r\n        <nav>\r\n            <div className=\"nav-wrapper teal lighten-1\">\r\n                <ul id=\"nav-mobile\" className=\"left hide-on-med-and-down  teal lighten-1\">\r\n                    <li>{isLogged ?\r\n                        <button className={\"btn btn-flat teal lighten-1\"} onClick={logoutHandler}>Logout</button> :\r\n                        <NavigationLink to={login} title={\"Login\"}/>}</li>\r\n                    <li><NavigationLink to={restorePass} title={\"Restore password\"}/></li>\r\n                    <li><NavigationLink to={profile} title={\"Profile\"}/></li>\r\n                    <li><NavigationLink to={packs} title={\"Packs\"}/></li>\r\n                    <li><NavigationLink to={card} title={\"Card\"}/></li>\r\n                    <li><NavigationLink to={resetPass} title={\"Reset password\"}/></li>\r\n                    <li><NavigationLink to={registration} title={\"Registration\"}/></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","export const login: string = '/login';\r\nexport const logout: string = '/logout';\r\nexport const newPass: string = '/newPassword';\r\nexport const profile: string = '/profile';\r\nexport const packs: string = '/packs';\r\nexport const card: string = '/card';\r\nexport const restorePass: string = '/restorePassword';\r\nexport const registration: string = '/registration';\r\nexport const resetPass: string = '/resetPassword'\r\n// export const pageNotFound: string = '/pageNotFound_404';\r\n","import React, {useEffect} from 'react';\r\nimport style from './Login.module.css';\r\nimport inputStyle from '../Common/Input/Input.module.css'\r\nimport buttonStyle from '../Common/Button/Button.module.css'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../bll/login-reducer\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {authMeTC} from \"../../bll/profile-reducer\";\r\nimport {Loading} from \"../Common/Loading/Loading\";\r\n\r\ntype LoginPropType = any\r\n\r\nconst Login = React.memo((props: LoginPropType) => {\r\n    const isLogged = useSelector<AppRootStateType, boolean>(state => state.app.isLogged)\r\n    const isError = useSelector<AppRootStateType, string>(state => state.login.error)\r\n    const isLoading = useSelector<AppRootStateType, boolean>(state => state.app.isLoading)\r\n    const isRequestAuthMe = useSelector<AppRootStateType, boolean>(state => state.app.isRequestAuthMe)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isRequestAuthMe)\r\n            dispatch(authMeTC())\r\n    }, [])\r\n\r\n    type FormikErrorType = {\r\n        email?: string,\r\n        password?: string\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = \"Requires\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email adress\"\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 7) {\r\n                errors.password = 'Password must be equal or more than 7 characters';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        }\r\n    })\r\n\r\n    if (isLogged) return <Redirect to={'/profile'}/>\r\n\r\n    return (\r\n        <div className={style.login}>\r\n            {/* {isLoading && <Loading/>} */}\r\n            <h2>Login Page</h2>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div>\r\n                    <input className={inputStyle.inputStyle}\r\n                           name={'email'}\r\n                           type={'text'}\r\n                           placeholder={'E-mail'}\r\n                           {...formik.getFieldProps('email')}\r\n                    />\r\n                    {formik.values.email ? <div style={{color: \"red\"}}>\r\n                        {formik.errors.email}\r\n                    </div> : null}\r\n                </div>\r\n                <div>\r\n                    <input className={inputStyle.inputStyle}\r\n                           name={'password'}\r\n                           type={'password'}\r\n                           placeholder={'Password'}\r\n                           {...formik.getFieldProps('password')}\r\n                    />\r\n                    {formik.values.password ? <div style={{color: 'red'}}>\r\n                        {formik.errors.password}\r\n                    </div> : null}\r\n                </div>\r\n                <div>\r\n                    <span>Remember Me </span>\r\n                    <input type={'checkbox'}\r\n                           {...formik.getFieldProps('rememberMe')}\r\n                           checked={formik.values.rememberMe}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button className={\"btn waves-effect waves-light\"}\r\n                            type={'submit'}\r\n                            disabled={isLoading}\r\n                    >Login\r\n                    </button>\r\n                </div>\r\n            </form>\r\n            <div>\r\n                {/*<Input value={'Choose the dark side'} onChange={(text: string) => console.log(text)}/>*/}\r\n            </div>\r\n            <div>\r\n                {/*<Button text={'we have cookies!:)'} onClick={() => alert('You have chosen wisely')} />*/}\r\n            </div>\r\n            <div>\r\n                {isError && <div> ${isError} </div>}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { LoginStateType } from '../../bll/login-reducer';\r\nimport { AppRootStateType } from '../../bll/store';\r\nimport Login from './Login';\r\n\r\nconst LoginContainer = () => {\r\n\r\n\tconst login = useSelector<AppRootStateType, LoginStateType>(state => state.login);\r\n\tconst dispatch = useDispatch();\r\n\r\n\treturn (\r\n\t\t<Login />\r\n\t)\r\n}\r\n\r\nexport default LoginContainer;","import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport style from './PageNotFound.module.css';\r\n\r\nconst PageNotFound = () => {\r\n\r\n\tif (<Route exact path={'/'} />) {\r\n\t\treturn <Redirect to={'/login'} />\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={style.pageNotFound}>\r\n\t\t\t<h2>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<span>PAGE NOT FOUND</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<span>404 ERROR!</span>\r\n\t\t\t\t</div>\r\n\t\t\t</h2>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default PageNotFound;","import axios from 'axios';\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true\r\n}\r\n\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n\t// baseURL: 'http://localhost:7542/2.0/',\r\n\t...settings\r\n});\r\n\r\nexport const restorePassAPI = {\r\n\trestorePass(password: string, token: string) {\r\n\t\t// debugger;\r\n\t\treturn instance.post('auth/set-new-password', {\r\n            password: password,\r\n            resetPasswordToken: token\r\n\t\t})\r\n\t},\r\n}\r\n","import { Dispatch } from \"redux\";\r\nimport { restorePassAPI } from \"../api/restorePassAPI\";\r\nimport {setIsLoadingAC} from \"./app-reducer\";\r\n\r\nexport type RestorePassStateType = {\r\n\tanswer: string,\r\n\tisRestored: boolean\r\n}\r\n\r\ntype ChangeRestoreAnswerActionType = {\r\n\ttype: 'restore/CHANGE-ANSWER',\r\n\tanswer: string,\r\n}\r\ntype isRestoredActionType = {\r\n\ttype: 'restore/CHANGE-STATUS',\r\n\tisRestored: boolean,\r\n}\r\n\r\nexport type ActionsType = ChangeRestoreAnswerActionType | isRestoredActionType;\r\n\r\nconst initialState: RestorePassStateType = {\r\n\tanswer: '',\r\n\tisRestored: false\r\n};\r\n\r\nexport const restorePasswordReducer = (state: RestorePassStateType = initialState, action: ActionsType): RestorePassStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase \"restore/CHANGE-ANSWER\": {\r\n\t\t\treturn { ...state, answer: action.answer }\r\n\t\t}\r\n\t\tdefault: {\r\n\t\t\treturn state\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//actions\r\n\r\nexport const changeRestoreAnswerAC = (text: string): ChangeRestoreAnswerActionType => {\r\n\treturn { type: \"restore/CHANGE-ANSWER\", answer: text }\r\n}\r\n\r\nexport const restoreSendAC = (send: boolean): isRestoredActionType => {\r\n\treturn { type: \"restore/CHANGE-STATUS\", isRestored: send }\r\n}\r\n\r\n//thunk\r\nexport const restorePassTC = (password: string, token: string) => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t\tdispatch(setIsLoadingAC(true))\r\n\t\trestorePassAPI.restorePass(password, token)\r\n\t\t\t.then(res => {\r\n\t\t\t\tdispatch(setIsLoadingAC(false))\r\n\t\t\t\tdispatch(changeRestoreAnswerAC(res.data.info));\r\n\t\t\t\tdispatch(restoreSendAC(true))\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tdispatch(setIsLoadingAC(false))\r\n\t\t\t\tconsole.log(err.error);\r\n\t\t\t})\r\n\t}\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport style from './Profile.module.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {authMeTC, ProfileStateType} from \"../../bll/profile-reducer\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {Loading} from \"../Common/Loading/Loading\";\r\n\r\ntype ProfilePropsType = any\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    const isLogged = useSelector<AppRootStateType, boolean>(state => state.app.isLogged)\r\n    const userInfo = useSelector<AppRootStateType, ProfileStateType>(state => state.profile)\r\n    const isLoading = useSelector<AppRootStateType, boolean>(state => state.app.isLoading)\r\n    const isRequestAuthMe = useSelector<AppRootStateType, boolean>(state => state.app.isRequestAuthMe)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (!isRequestAuthMe)\r\n            dispatch(authMeTC())\r\n    }, [])\r\n\r\n    if (!isLogged) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.profile}>\r\n            {/* {isLoading && <Loading/>} */}\r\n            {/*<h2>Profile Page</h2>*/}\r\n            <div>Email: {userInfo.email}</div>\r\n            <div>Name: {userInfo.name}</div>\r\n            <div>Created: {userInfo.created}</div>\r\n            <div>publicCardPacksCount: {userInfo.publicCardPacksCount}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { restoreSendAC } from '../../bll/restorePas-reducer';\r\nimport { AppRootStateType } from '../../bll/store';\r\nimport Profile from './Profile';\r\n\r\nconst ProfileContainer = () => {\r\n\r\n\tconst isRestored = useSelector<AppRootStateType, boolean>(ans => ans.restorePassword.isRestored); \r\n\tconst dispatch = useDispatch();\r\n\r\n\tif(isRestored) dispatch(restoreSendAC(false))\r\n\r\n\treturn (\r\n\t\t<Profile />\r\n\t)\r\n}\r\n\r\nexport default ProfileContainer;","import axios from 'axios';\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    // baseURL: 'http://localhost:7542/2.0/',\r\n    ...settings\r\n});\r\n\r\ntype RegistrationResponse = {\r\n    error: string,\r\n    method: string,\r\n    url: string,\r\n    query: {},\r\n    body: {}\r\n}\r\n\r\nexport type RegistrationParamsType = {\r\n    email: string,\r\n    password: string\r\n}\r\n\r\nexport const registerAPI = {\r\n    registration<RegistrationResponse>(data: RegistrationParamsType) {\r\n        return instance.post('auth/register', {\r\n            email: data.email,\r\n            password: data.password\r\n        })\r\n    },\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {registerAPI, RegistrationParamsType} from \"../api/registrationApi\";\r\nimport {setIsLoadingAC} from \"./app-reducer\";\r\n\r\nexport type RegistrationStateType = any\r\n\r\nexport type ActionsType = any;\r\n\r\nconst initialState: RegistrationStateType = {\r\n    isRegistred: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const registrationReducer = (state: RegistrationStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'CREATE-REGISTRATION': {\r\n            return {...state, isRegistred: action.value}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n// actions\r\nexport const registrationAC = (value: boolean) =>\r\n    ({type: 'CREATE-REGISTRATION', value} as const)\r\n\r\n// thunks\r\nexport const registrationTC = (data: RegistrationParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setIsLoadingAC(true))\r\n    registerAPI.registration(data)\r\n        .then(res => {\r\n                dispatch(setIsLoadingAC(false))\r\n                dispatch(registrationAC(true))\r\n            }\r\n        )\r\n        .catch((err) => {\r\n            dispatch(setIsLoadingAC(false))\r\n        })\r\n}\r\n\r\nexport const test111 = () => () => {\r\n    debugger\r\n}\r\n","import React from 'react';\r\nimport style from './Registration.module.css'\r\nimport inputStyle from \"../Common/Input/Input.module.css\";\r\nimport buttonStyle from \"../Common/Button/Button.module.css\";\r\nimport { useFormik } from \"formik\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStateType } from \"../../bll/store\";\r\nimport { Redirect } from 'react-router-dom'\r\nimport { registrationTC } from \"../../bll/registration-reducer\";\r\nimport {Loading} from \"../Common/Loading/Loading\";\r\n\r\ntype RegistrationPropsType = any\r\n\r\nconst Registration = (props: RegistrationPropsType) => {\r\n\r\n\tconst isRegistred = useSelector<AppRootStateType, boolean>(state => state.registration.isRegistred);\r\n\tconst isLoading = useSelector<AppRootStateType, boolean>(state => state.app.isLoading)\r\n\tconst dispatch = useDispatch()\r\n\r\n\ttype FormikErrorType = {\r\n\t\temail?: string,\r\n\t\tpassword?: string\r\n\t\trepeatPassword?: string\r\n\t}\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: '',\r\n\t\t\tpassword: '',\r\n\t\t\trepeatPassword: ''\r\n\t\t},\r\n\t\tvalidate: (values) => {\r\n\t\t\tconst errors: FormikErrorType = {};\r\n\t\t\tif (!values.email) {\r\n\t\t\t\terrors.email = \"Requires\"\r\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n\t\t\t\terrors.email = \"Invalid email adress\"\r\n\t\t\t}\r\n\r\n\t\t\tif (!values.password) {\r\n\t\t\t\terrors.password = 'Required';\r\n\t\t\t} else if (values.password.length < 7) {\r\n\t\t\t\terrors.password = 'Password must be equal or more than 7 characters';\r\n\t\t\t}\r\n\r\n\t\t\tif (!values.repeatPassword) {\r\n\t\t\t\terrors.repeatPassword = 'Required'\r\n\t\t\t} else if (values.repeatPassword.length < 7) {\r\n\t\t\t\terrors.repeatPassword = 'Password must equal or be more than 7 characters';\r\n\t\t\t}\r\n\r\n\t\t\tif (values.password !== values.repeatPassword) {\r\n\t\t\t\terrors.repeatPassword = 'Password should be the same!'\r\n\t\t\t}\r\n\r\n\t\t\treturn errors;\r\n\t\t},\r\n\t\tonSubmit: values => {\r\n\t\t\tdispatch(registrationTC({ email: values.email, password: values.password }))\r\n\t\t},\r\n\t})\r\n\r\n\r\n\tif (isRegistred) {\r\n\t\treturn <Redirect to={\"/profile\"} />\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={style.registration}>\r\n\t\t\t{/* { isLoading && <Loading />} */}\r\n\t\t\t<h2>Registration Page</h2>\r\n\t\t\t<div className={style.login}>\r\n\t\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input className={inputStyle.inputStyle}\r\n\t\t\t\t\t\t\ttype={'text'}\r\n\t\t\t\t\t\t\tplaceholder={'E-mail'}\r\n\t\t\t\t\t\t\tname={'email'}\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('email')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{formik.values.email ? <div style={{ color: \"red\" }}>\r\n\t\t\t\t\t\t\t{formik.errors.email}\r\n\t\t\t\t\t\t</div> : null}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input className={inputStyle.inputStyle}\r\n\t\t\t\t\t\t\ttype={'password'}\r\n\t\t\t\t\t\t\tplaceholder={'Password'}\r\n\t\t\t\t\t\t\tname={'password'}\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('password')} />\r\n\t\t\t\t\t\t{formik.values.password ? <div style={{ color: 'red' }}>\r\n\t\t\t\t\t\t\t{formik.errors.password}\r\n\t\t\t\t\t\t</div> : null}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input className={inputStyle.inputStyle}\r\n\t\t\t\t\t\t\ttype={'password'}\r\n\t\t\t\t\t\t\tplaceholder={'Password'}\r\n\t\t\t\t\t\t\tname={'repeatPassword'}\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('repeatPassword')} />\r\n\t\t\t\t\t\t{formik.values.repeatPassword ? <div style={{ color: 'red' }}>\r\n\t\t\t\t\t\t\t{formik.errors.repeatPassword}\r\n\t\t\t\t\t\t</div> : null}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<button className={\"btn waves-effect waves-light\"}\r\n\t\t\t\t\t\t\ttype={'submit'}\r\n\t\t\t\t\t\t\tdisabled={formik.values.password !== formik.values.repeatPassword}\r\n\t\t\t\t\t\t>Registration\r\n                        </button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Registration;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RegistrationStateType } from '../../bll/registration-reducer';\r\nimport { AppRootStateType } from '../../bll/store';\r\nimport Registration from './Registration';\r\n\r\nconst RegistrationContainer = () => {\r\n\r\n\tconst registration = useSelector<AppRootStateType, RegistrationStateType>(state => state.registration);\r\n\tconst dispatch = useDispatch();\r\n\r\n\treturn (\r\n\t\t<Registration/>\r\n\t)\r\n}\r\n\r\nexport default RegistrationContainer;","import axios from 'axios';\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true\r\n}\r\n\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n\t// baseURL: 'http://localhost:7542/2.0/',\r\n\t...settings\r\n});\r\n\r\nexport const resetPassAPI = {\r\n\tresetPass(email: string) {\r\n\t\t// debugger;\r\n\t\treturn instance.post('auth/forgot', {\r\n\t\t\temail: email,\r\n\t\t\tfrom: \"Almashiy <shein_92@ukr.net>\",\r\n\t\t\tmessage: `<div style=\"background-color: lime; padding: 15px\">\r\n            \tpassword recovery link: \r\n\t\t\t\t<a href='https://shein92.github.io/cards/#/restorePassword/$token$'>\r\n            \tlink</a></div>`\r\n\t\t})\r\n\t\t// <a href='http://localhost:3000/cards#/restorePassword/$token$'>\r\n\t\t// <a href='https://shein92.github.io/cards/#/restorePassword/$token$'>\r\n\t},\r\n}\r\n","import { resetPassAPI } from '../api/resetPassAPI';\r\nimport { Dispatch } from \"redux\";\r\nimport {setIsLoadingAC} from \"./app-reducer\";\r\n\r\nexport type ResetPassStateType = {\r\n\tanswer: string,\r\n\tisReseted: boolean\r\n}\r\n\r\ntype ChangeAnswerActionType = {\r\n\ttype: \"reset/CHANGE-ANSWER\",\r\n\tanswer: string\r\n}\r\ntype IsResetSentActionType = {\r\n\ttype: \"reset/CHANGE-STATUS\",\r\n\tisReseted: boolean\r\n}\r\n\r\nexport type ActionsType = ChangeAnswerActionType | IsResetSentActionType;\r\n\r\nconst initialState: ResetPassStateType = {\r\n\tanswer: '',\r\n\tisReseted: false\r\n};\r\n\r\nexport const resetPasswordReducer = (state: ResetPassStateType = initialState, action: ActionsType): ResetPassStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase \"reset/CHANGE-ANSWER\": {\r\n\t\t\treturn { ...state, answer: action.answer }\r\n\t\t}\r\n\t\tcase \"reset/CHANGE-STATUS\": {\r\n\t\t\treturn {...state, isReseted: action.isReseted}\r\n\t\t}\r\n\t\tdefault: {\r\n\t\t\treturn state\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//actions\r\nexport const changeResetAnswerAC = (text: string): ChangeAnswerActionType => {\r\n\treturn { type: \"reset/CHANGE-ANSWER\", answer: text }\r\n}\r\nexport const resetSendAC = (send: boolean): IsResetSentActionType => {\r\n\treturn { type: \"reset/CHANGE-STATUS\", isReseted: send }\r\n}\r\n\r\n//thunk\r\nexport const resetPassTC = (email: string) => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t\tdispatch(setIsLoadingAC(true))\r\n\t\tresetPassAPI.resetPass(email)\r\n\t\t\t.then(res => {\r\n\t\t\t\tdispatch(setIsLoadingAC(false))\r\n\t\t\t\tdispatch(changeResetAnswerAC(res.data.info));\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tdispatch(setIsLoadingAC(false))\r\n\t\t\t\tdispatch(changeResetAnswerAC(err.message));\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t})\r\n\t}\r\n}\r\n","import { useFormik } from 'formik';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { resetPassTC } from '../../bll/resetPass-reducer';\r\nimport { AppRootStateType } from '../../bll/store';\r\nimport { profile } from '../Routes/routes';\r\nimport style from './ResetPass.module.css';\r\nimport inputStyle from '../Common/Input/Input.module.css';\r\nimport btn from '../Common/Button/Button.module.css';\r\n\r\nconst ResetPassContainer = React.memo(() => {\r\n\r\n\tlet answer = useSelector<AppRootStateType, string>(ans => ans.resetPassword.answer);\r\n\tlet isReseted = useSelector<AppRootStateType, boolean>(ans => ans.resetPassword.isReseted);\r\n\tlet dispatch = useDispatch();\r\n\r\n\ttype FormikErrorType = {\r\n\t\temail?: string\r\n\t}\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: '',\r\n\t\t},\r\n\t\tvalidate: (values) => {\r\n\t\t\tconst errors: FormikErrorType = {};\r\n\t\t\tif (!values.email) {\r\n\t\t\t\terrors.email = \"Requires\"\r\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n\t\t\t\terrors.email = \"Invalid email adress\"\r\n\t\t\t}\r\n\t\t\treturn errors;\r\n\t\t},\r\n\t\tonSubmit: values => {\r\n\t\t\tdebugger;\r\n\t\t\tdispatch(resetPassTC(values.email));\r\n\t\t},\r\n\t});\r\n\r\n\tif (isReseted) return <Redirect to={profile} />\r\n\r\n\treturn (\r\n\t\t<div className={style.resetPass}>\r\n\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<span>Your email adress: </span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<input className={inputStyle.inputStyle}\r\n\t\t\t\t\tname={'email'}\r\n\t\t\t\t\ttype={\"text\"}\r\n\t\t\t\t\tplaceholder={'E-mail'}\r\n\t\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\t\tvalue={formik.values.email}\r\n\t\t\t\t/>\r\n\t\t\t\t{formik.values.email ? <div style={{ color: \"red\" }}>\r\n\t\t\t\t\t{formik.errors.email}\r\n\t\t\t\t</div> : null}\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button className={\"btn waves-effect waves-light\"}\r\n\t\t\t\t\ttype={\"submit\"}>Submit</button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t\t{answer}\r\n\t\t</div>\r\n\t);\r\n})\r\n\r\nexport default ResetPassContainer;\r\n","import { useFormik } from 'formik';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect, useParams } from 'react-router-dom';\r\nimport { restorePassTC } from '../../bll/restorePas-reducer';\r\nimport { AppRootStateType } from '../../bll/store';\r\nimport { profile } from '../Routes/routes';\r\nimport style from './RestorePass.module.css';\r\nimport inputStyle from '../Common/Input/Input.module.css';\r\nimport btn from '../Common/Button/Button.module.css';\r\nimport {Loading} from \"../Common/Loading/Loading\";\r\n\r\nconst RestorePassContainer = React.memo(() => {\r\n\r\n\tlet answer = useSelector<AppRootStateType, string>(ans => ans.restorePassword.answer);\r\n\tconst isRestored = useSelector<AppRootStateType, boolean>(ans => ans.restorePassword.isRestored);\r\n\tconst isLoading = useSelector<AppRootStateType, boolean>(state => state.app.isLoading)\r\n\tconst dispatch = useDispatch();\r\n\tlet { token } = useParams();\r\n\r\n\ttype FormikErrorType = {\r\n\t\tpassword?: string\r\n\t\tsecondPassword?: string\r\n\t}\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\tpassword: '',\r\n\t\t\tsecondPassword: ''\r\n\t\t},\r\n\t\tvalidate: (values) => {\r\n\t\t\tconst errors: FormikErrorType = {};\r\n\r\n\t\t\tif (!values.password) {\r\n\t\t\t\terrors.password = 'Required';\r\n\t\t\t} else if (values.password.length < 7) {\r\n\t\t\t\terrors.password = 'Password must be equal or more than 7 characters';\r\n\t\t\t}\r\n\r\n\t\t\tif (!values.secondPassword) {\r\n\t\t\t\terrors.secondPassword = 'Required'\r\n\t\t\t} else if (values.secondPassword.length < 7) {\r\n\t\t\t\terrors.secondPassword = 'Password must be equal or more than 7 characters';\r\n\t\t\t}\r\n\r\n\t\t\tif (values.password !== values.secondPassword) {\r\n\t\t\t\terrors.secondPassword = 'Password should be the same!'\r\n\t\t\t}\r\n\r\n\t\t\treturn errors;\r\n\t\t},\r\n\t\tonSubmit: values => {\r\n\t\t\tdispatch(restorePassTC(values.password, token))\r\n\t\t}\r\n\t});\r\n\r\n\tif (isRestored) { return <Redirect to={profile} /> }\r\n\r\n\treturn (\r\n\t\t<div className={style.restorePass} style={{ textAlign: 'center' }}>\r\n\t\t\t{/* { isLoading && <Loading />} */}\r\n\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<span>Password: </span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<input className={inputStyle.inputStyle}\r\n\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\tname={\"password\"}\r\n\t\t\t\t\t\tplaceholder={'Password'}\r\n\t\t\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\t\t\tvalue={formik.values.password}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{formik.values.password ? <div style={{ color: 'red' }}>\r\n\t\t\t\t\t\t{formik.errors.password}\r\n\t\t\t\t\t</div> : null}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<span>Repeat password</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<input className={inputStyle.inputStyle}\r\n\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\tname={\"secondPassword\"}\r\n\t\t\t\t\t\tplaceholder={'Password'}\r\n\t\t\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\t\t\tvalue={formik.values.secondPassword}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{formik.values.secondPassword ? <div style={{ color: 'red' }}>\r\n\t\t\t\t\t\t{formik.errors.secondPassword}\r\n\t\t\t\t\t</div> : null}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button className={btn.btn}\r\n\t\t\t\t\t\ttype={\"submit\"}\r\n\t\t\t\t\t\tdisabled={formik.values.password !== formik.values.secondPassword}\r\n\t\t\t\t\t>Send</button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t\t<div>\r\n\t\t\t\t{answer}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n\r\n\t// return (\r\n\t// \t<RestorePass/>\r\n\t// )\r\n})\r\n\r\nexport default RestorePassContainer;\r\n","import {Dispatch} from \"redux\";\r\nimport {ThunkDispatch} from \"redux-thunk\"\r\nimport {setIsLoadingAC, setIsLoggedAC} from \"./app-reducer\";\r\nimport {cardApi} from \"../api/cardsAPI\";\r\nimport {AddCardPackForm} from \"../ui/Packs/NewPack/NewPack\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\n\r\nlet initialState: CardResponseType = {\r\n    cardPacks: [],\r\n    cardPacksTotalCount: 0,\r\n    maxCardsCount: 0,\r\n    page: 0,\r\n    pageCount: 10,\r\n    min: 0,\r\n    max: 20,\r\n    packName: '',\r\n    sortPacks: '0updated',\r\n    user_id: '',\r\n\r\n}\r\n\r\n\r\nexport const cardsReducer = (state: CardResponseType = initialState, action: ActionsType): CardResponseType => {\r\n    switch (action.type) {\r\n        case 'cards/GET-CARDS':\r\n            return {...state, ...action.cards}\r\n        case 'cards/REMOVE-CARD-PACK':\r\n            const newState = {...state, cardPacks: state.cardPacks.filter(cardPack => cardPack._id !== action.id)}\r\n            return newState\r\n        case \"cards/SET-CURRENT-PAGE\":\r\n            return {...state, page: action.currentPage}\r\n        case \"cards/SET-PAGE-COUNT\":\r\n            return {...state, pageCount: action.count}\r\n        case \"cards/SET-MIN-MAX-VALUE\":\r\n            return {...state, min: action.value[0], max: action.value[1]}\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//Actions Creators\r\nconst setCardsAC = (cards: CardResponseType) => {\r\n    return {type: 'cards/GET-CARDS', cards} as const\r\n}\r\n\r\nconst setRemoveCardPack = (id: string) => {\r\n    return {type: 'cards/REMOVE-CARD-PACK', id} as const\r\n}\r\nexport const setCurrentPageAC = (currentPage: number) => ({type: 'cards/SET-CURRENT-PAGE', currentPage} as const)\r\nexport const setCountOnPageAC = (count: number) => ({type: 'cards/SET-PAGE-COUNT', count} as const)\r\nexport const setMinMaxValueAC = (value: Array<number>) => ({type: 'cards/SET-MIN-MAX-VALUE', value} as const)\r\n\r\n\r\n// Thunks\r\n\r\nexport const getCardsTC = (packName?: string, min: number = 0, max: number = 20, sortPacks: string = '0updates', page: number = 1, pageCount: number = 10, user_id?: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setIsLoadingAC(true))\r\n    cardApi.getCardPack(packName, min, max, sortPacks, page, pageCount, user_id)\r\n        .then(res => {\r\n            dispatch(setIsLoadingAC(false))\r\n            dispatch(setCardsAC(res.data))\r\n            // dispatch(setFilteronPageAC(sortPacks))\r\n        })\r\n        .catch(e => {\r\n            dispatch(setIsLoadingAC(false))\r\n        })\r\n}\r\n\r\n\r\nexport const removeCardPackTC = (id: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setIsLoadingAC(true))\r\n    cardApi.removeCardPack(id)\r\n        .then(res => {\r\n            dispatch(setIsLoadingAC(false))\r\n            dispatch(setRemoveCardPack(id))\r\n        })\r\n        .catch(e => {\r\n            dispatch(setIsLoadingAC(false))\r\n        })\r\n}\r\n\r\nexport const addCardPackTC = (data: AddCardPackForm) => (dispatch: ThunkDispatch<AppRootStateType, {}, ActionsType>) => {\r\n    dispatch(setIsLoadingAC(true))\r\n    cardApi.addCardPack(data)\r\n        .then(res => {\r\n            dispatch(getCardsTC())\r\n            dispatch(setIsLoadingAC(false))\r\n        })\r\n        .catch(e => {\r\n            dispatch(setIsLoadingAC(false))\r\n        })\r\n}\r\n\r\nexport const updateCardPackTC = (data: UpdateCardPackType) => (dispatch: ThunkDispatch<AppRootStateType, {}, ActionsType>) => {\r\n    dispatch(setIsLoadingAC(true))\r\n    cardApi.updateCardPack(data)\r\n        .then(res => {\r\n            dispatch(getCardsTC())\r\n            dispatch(setIsLoadingAC(false))\r\n        })\r\n        .catch(e => {\r\n            dispatch(setIsLoadingAC(false))\r\n        })\r\n}\r\n\r\n\r\n// Types\r\n\r\nexport type CardPacksType = {\r\n    _id: string,\r\n    user_id: string,\r\n    user_name: string,\r\n    name: string,\r\n    cardsCount: number\r\n    path: string,\r\n    grade: number,\r\n    shots: number,\r\n    rating: number,\r\n    type: string,\r\n    created: string,\r\n    updated: string,\r\n    __v: number\r\n}\r\n\r\nexport type CardResponseType = {\r\n    cardPacks: Array<CardPacksType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    page: number\r\n    pageCount: number,\r\n    packName: string,\r\n    min: number,\r\n    max: number,\r\n    sortPacks: string,\r\n    user_id: string,\r\n\r\n}\r\n\r\nexport type InitialStateCardPacks = {\r\n    cardPacks: Array<CardPacksType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    min: number\r\n    max: number\r\n}\r\n\r\nexport type UpdateCardPackType = {\r\n    _id: string\r\n    name: string\r\n}\r\n\r\nexport type ActionsType =\r\n    | ReturnType<typeof setIsLoggedAC>\r\n    | ReturnType<typeof setIsLoadingAC>\r\n    | ReturnType<typeof setCardsAC>\r\n    | ReturnType<typeof setRemoveCardPack>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof setCountOnPageAC>\r\n    | ReturnType<typeof setMinMaxValueAC>\r\n","import React, {useState} from \"react\";\r\nimport styles from './Paginator.module.css'\r\n\r\nexport const Paginator = ({totalItemsCount, pageSize, currentPage, portionsSize, onChangePage, onChangeCountOnPage}: PaginatorPropsType) => {\r\n    const [portionNumber, setPortionNumber] = useState(1)\r\n    const pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages: Array<number> = []\r\n    for (let i = 1; i < pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    const lastPage = pages[pages.length - 1]\r\n    const portionsCount = Math.ceil(pagesCount / portionsSize)\r\n\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionsSize + 1\r\n    const rightPortionPageNumber = portionNumber * portionsSize\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className={\"col s6\"}>\r\n                <div className={styles.div}>\r\n                    <ul className=\"pagination\">\r\n                        {portionNumber > 1 &&\r\n                        <li onClick={() => setPortionNumber(portionNumber - 1)} className=\"disabled\"><i\r\n                            className=\"material-icons\">chevron_left</i></li>}\r\n                        {pages\r\n                            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                            .map(p => {\r\n                                return <li onClick={() => onChangePage(p)} key={p}\r\n                                           className={currentPage === p ? \"active teal lighten-1\" : \"waves-effect\"}>{p}</li>\r\n                            })\r\n                        }\r\n                        {portionsCount > portionNumber &&\r\n                        <li onClick={() => setPortionNumber(portionNumber + 1)} className=\"waves-effect\"><i\r\n                            className=\"material-icons\">chevron_right</i></li>}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={\"col s1\"}>\r\n                <div className={styles.select}>\r\n                    <select className=\"browser-default\" onChange={e => onChangeCountOnPage(+e.target.value)}>\r\n                        <option value=\"10\" selected={pagesCount === +10}>10</option>\r\n                        <option value=\"20\" selected={pagesCount === +20}>20</option>\r\n                        <option value=\"30\" selected={pagesCount === +30}>30</option>\r\n                        <option value=\"40\" selected={pagesCount === +40}>40</option>\r\n                        <option value=\"50\" selected={pagesCount === +50}>50</option>\r\n                    </select>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n// types\r\n\r\ntype PaginatorPropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    portionsSize: number\r\n    onChangePage: (currentPage: number) => void\r\n    onChangeCountOnPage: (count: number) => void\r\n}\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getCardsTC } from '../../../bll/cards-reducer';\r\n\r\ntype FilterBtnPropstype = {\r\n\tfilterUp: string,\r\n\tfilterDown: string,\r\n\tpackId?: string,\r\n\tisArrowDown: boolean,\r\n\tsetIsArrowDown: (value: boolean) => void,\r\n\tpackName?: string, \r\n\tmin?: number, \r\n\tmax?: number, \r\n\tpage?: number,\r\n\tpageCount?: number, \r\n\tuserId?: string\r\n}\r\n\r\nconst FilterBtn = (props: FilterBtnPropstype) => {\r\n\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst onUpClick = () => {\r\n\t\tif(getCardsTC()) {\r\n\t\t\tdispatch(getCardsTC(props.packName, props.min, props.max, props.filterUp, props.page, props.pageCount));\r\n\t\t\tprops.setIsArrowDown(false);\r\n\t\t}\r\n\t}\r\n\tconst onDownClick = () => {\r\n\t\tif(getCardsTC()) {\r\n\t\t\tdispatch(getCardsTC(props.packName, props.min, props.max, props.filterDown, props.page, props.pageCount));\r\n\t\t\tprops.setIsArrowDown(true)\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t<>{props.isArrowDown ? <span style={{cursor: 'pointer'}} onClick={onUpClick}> ↓ </span>: <span style={{cursor: 'pointer'}} onClick={onDownClick}> ↑</span>}</>\r\n\t)\r\n}\r\n\r\nexport default FilterBtn;","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\nimport {NavLink} from 'react-router-dom';\r\nimport {Paginator} from '../Common/Paginator/Paginator';\r\nimport {CardPacksType, CardResponseType, getCardsTC, setCountOnPageAC, setCurrentPageAC} from \"../../bll/cards-reducer\";\r\nimport FilterBtn from '../Common/FilterBtn/FilterBtn';\r\n\r\n\r\nconst Packs = (props: CardsPropsType) => {\r\n    const userId = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n    const {cardPacksTotalCount, page, pageCount, packName, min, max, sortPacks} = useSelector<AppRootStateType, CardResponseType>(state => state.cards)\r\n    const dispatch = useDispatch()\r\n    const [isNameOfPackArrowDown, setNameOfPackIsArrowDonw] = useState(false);\r\n    const [isNameOfCreatorArrowDown, setIsNameOfCreatorArrowDonw] = useState(false);\r\n    const [isQuantityOfCardsArrowDown, setIsQuantityOfCardsArrowDonw] = useState(false);\r\n\r\n    useEffect( () => {\r\n        if (props.filterById)\r\n            dispatch(getCardsTC(packName, min, max, sortPacks, page, pageCount, userId))\r\n        else dispatch(getCardsTC(packName, min, max, sortPacks, page, pageCount))\r\n    }, [page, pageCount, packName, min, max, sortPacks, props.filterById, dispatch])\r\n    const removeHandler = (id: string) => {\r\n        props.removeCardPack(id)\r\n    }\r\n\r\n    const updateHandler = (id: string, name: string) => {\r\n        props.updateHandler(id, name)\r\n    }\r\n\r\n    const onChangePage = (currentPage: number) => {\r\n        dispatch(setCurrentPageAC(currentPage))\r\n    }\r\n\r\n    const onChangeCountOnPage = (count: number) => {\r\n        dispatch(setCountOnPageAC(count))\r\n    }\r\n\r\n    const rows = props.cards.map((card) =>\r\n        <tr key={card._id}>\r\n            <NavLink to={`card/${card._id}`}>\r\n                <td>{card.name}</td>\r\n            </NavLink>\r\n            <td>{card.user_name}</td>\r\n            <td>{card.cardsCount}</td>\r\n            <td>{card.rating}</td>\r\n            <td>{card.shots}</td>\r\n            <td>\r\n                <div>\r\n                    <div>\r\n                        <button style={{marginRight: '5px'}} disabled={userId !== card.user_id}\r\n                                onClick={() => updateHandler(card._id, card.name)}\r\n                                className=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">\r\n                            <i className=\"material-icons\">edit</i>\r\n                        </button>\r\n                        <button disabled={userId !== card.user_id} onClick={() => removeHandler(card._id)}\r\n                                className=\"btn red waves-effect waves-light\" type=\"submit\" name=\"action\">\r\n                            <i className=\"material-icons\">delete_forever</i>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </td>\r\n        </tr>\r\n    )\r\n    return (\r\n        <div>\r\n            <table className={\"highlight\"}>\r\n                <thead>\r\n                <tr>\r\n                    <th>Name <FilterBtn filterDown={'0name'} filterUp={'1name'} isArrowDown={isNameOfPackArrowDown} setIsArrowDown={setNameOfPackIsArrowDonw}\r\n                    max={max}\r\n                    min={min}\r\n                    page={page}\r\n                    pageCount={pageCount}\r\n                    /></th>\r\n                    <th>User Name <FilterBtn filterDown={'0user_name'} filterUp={'1user_name'} isArrowDown={isNameOfCreatorArrowDown} setIsArrowDown={setIsNameOfCreatorArrowDonw}\r\n                    max={max}\r\n                    min={min}\r\n                    page={page}\r\n                    pageCount={pageCount}\r\n                    /></th>\r\n                    <th>Cards Count <FilterBtn filterDown={'0cardsCount'} filterUp={'1cardsCount'} isArrowDown={isQuantityOfCardsArrowDown} setIsArrowDown={setIsQuantityOfCardsArrowDonw}\r\n                    max={max}\r\n                    min={min}\r\n                    page={page}\r\n                    pageCount={pageCount}\r\n                    /></th>\r\n                    <th>Rating</th>\r\n                    <th>Shots</th>\r\n                    <th>Manage</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {rows}\r\n                </tbody>\r\n            </table>\r\n            {/*Pagination*/}\r\n            <div>\r\n                {cardPacksTotalCount > pageCount &&\r\n                <Paginator totalItemsCount={cardPacksTotalCount} pageSize={pageCount} currentPage={page}\r\n                           portionsSize={10} onChangePage={onChangePage} onChangeCountOnPage={onChangeCountOnPage}/>\r\n                           }\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Packs;\r\n\r\n\r\n// types\r\n\r\ntype CardsPropsType = {\r\n    cards: Array<CardPacksType>\r\n    filterById: boolean\r\n    removeCardPack: (id: string) => void\r\n    updateHandler: (id: string, name: string) => void\r\n}\r\n","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {addCardPackTC} from \"../../../bll/cards-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport type AddCardPackForm = {\r\n    name?: string,\r\n    path?: string\r\n}\r\n\r\ntype NewCardPackPropsType = {\r\n    setModalActive: (value: boolean) => void\r\n}\r\n\r\nexport const NewPack = ({setModalActive}: NewCardPackPropsType) => {\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            path: ''\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(addCardPackTC(values))\r\n            setModalActive(false)\r\n            values.name = ''\r\n            values.path = ''\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <form className=\"col s12\" onSubmit={formik.handleSubmit}>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field col s6\">\r\n                        <input\r\n                            placeholder={'Name'}\r\n                            id=\"name\"\r\n                            name=\"name\"\r\n                            type=\"text\"\r\n                            className=\"validate\"\r\n                            {...formik.getFieldProps('name')}\r\n                        />\r\n                        <label htmlFor=\"name\" className=\"active\"/>\r\n                    </div>\r\n                    <div className=\"input-field col s6\">\r\n                        <input\r\n                            placeholder={'Path'}\r\n                            id=\"path\"\r\n                            name={\"path\"}\r\n                            type=\"text\"\r\n                            className=\"validate\"\r\n                            {...formik.getFieldProps('path')}\r\n                        />\r\n                        <label htmlFor=\"path\" className=\"active\"/>\r\n                    </div>\r\n                    <div>\r\n                        <button className=\"btn waves-effect waves-light\" type=\"submit\"\r\n                                name=\"action\">Create\r\n                            <i className=\"material-icons right\">add</i>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport styles from \"./Module.module.css\"\r\n\r\nexport const Modal = ({modalActive, setModalActive, children}: ModalPropsType) => {\r\n    return (\r\n        <div className={modalActive ? `${styles.wrapper} ${styles.active}` : styles.wrapper}\r\n             onClick={() => setModalActive(false)}>\r\n            <div className={modalActive ? `${styles.content} ${styles.active}` : styles.content}\r\n                 onClick={e => e.stopPropagation()}>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// types\r\n\r\ntype ModalPropsType = {\r\n    modalActive: boolean,\r\n    setModalActive: (value: boolean) => void\r\n    children: React.ReactNode\r\n}\r\n","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateCardPackTC} from \"../../../bll/cards-reducer\";\r\n\r\nexport const EditPack = ({id, name, setUpdateModalActive}: EditCardPackType) => {\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            _id: id,\r\n            name\r\n        },\r\n        onSubmit: async (values) => {\r\n            try {\r\n                await dispatch(updateCardPackTC(values))\r\n                setUpdateModalActive(false)\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n\r\n\r\n        }\r\n    })\r\n    return (\r\n        <form className=\"col s12\" onSubmit={formik.handleSubmit}>\r\n            <div className=\"row\">\r\n                <div className=\"input-field col s12\">\r\n                    <input\r\n                        placeholder={'Name'}\r\n                        id=\"name\"\r\n                        name=\"name\"\r\n                        type=\"text\"\r\n                        className=\"validate\"\r\n                        {...formik.getFieldProps('name')}\r\n                    />\r\n                    <label htmlFor=\"name\" className=\"active\"/>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"input-field col s12\">\r\n                    <button className=\"btn waves-effect waves-light\" type=\"submit\"\r\n                            name=\"action\">Update\r\n                        <i className=\"material-icons right\">update</i>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n// types\r\n\r\nexport type EditCardPackType = {\r\n    id: string\r\n    name: string,\r\n    setUpdateModalActive: (value: boolean) => void\r\n}\r\n","import axios from 'axios'\r\nimport { CardResType } from '../bll/card-reducer';\r\n\r\nconst settings = {\r\n\twithCredentials: true\r\n}\r\n\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n\t// baseURL: 'http://localhost:7542/2.0/',\r\n\t...settings\r\n});\r\n\r\nexport const getCardAPI = {\r\n\tgetCardsFromPack(packId: string, min: string = '1', max: string = '4', page: string = '1', pageCount: string = '7', cardAnswer: string = 'english', cardQuestion: string = 'english') {\r\n\t\treturn instance.get(`cards/card?cardsPack_id=${packId}`)\r\n\t},\r\n\taddCard(packId: string, question?: string, answer?: string) {\r\n\t\treturn instance.post<CardResType>('cards/card', {card: {cardsPack_id: packId, question, answer}})\r\n\t},\r\n\tremoveCard(cardId: string) {\r\n\t\treturn instance.delete(`cards/card?id=${cardId}`)\r\n\t},\r\n\tupdateCard(cardId: string, question?: string, comments?: string) {\r\n\t\treturn instance.put('cards/card', {card: {\r\n\t\t\t_id: cardId,\r\n\t\t\tquestion: question,\r\n\t\t\tcomments: comments\r\n\t\t}})\r\n\t}\r\n}\r\n","import { ThunkDispatch } from 'redux-thunk';\r\nimport { AppRootStateType } from './store';\r\nimport { Dispatch } from 'redux'\r\nimport { getCardAPI } from '../api/getCardAPI'\r\nimport { setIsLoadingAC } from './app-reducer'\r\n\r\nconst initialState: CardResType = {\r\n\tcards: [\r\n\t\t// \t{\r\n\t\t// \tanswer: '',\r\n\t\t// \tquestion: '',\r\n\t\t// \tcardsPack_id: '',\r\n\t\t// \tgrade: 0,\r\n\t\t// \trating: 0,\r\n\t\t// \tshots: 0,\r\n\t\t// \ttype: '',\r\n\t\t// \tuser_id: '',\r\n\t\t// \tcreated: '',\r\n\t\t// \tupdated: '',\r\n\t\t// \t__v: 0,\r\n\t\t// \t_id: ''\r\n\t\t// }\r\n\t],\r\n\tcardsTotalCount: 0,\r\n\tmaxGrade: 0,\r\n\tminGrade: 0,\r\n\tpage: 0,\r\n\tpageCount: 10,\r\n\tcardAnswer: '',\r\n\tcardQuestion: '',\r\n\tmin: 0,\r\n\tmax: 20\r\n}\r\n\r\nexport const cardReducer = (state: CardResType = initialState, action: ActionsType): CardResType => {\r\n\tswitch (action.type) {\r\n\t\tcase 'card/GET-CARD': {\r\n\t\t\treturn { ...state, cards: action.card.cards, cardsTotalCount: action.card.cardsTotalCount, maxGrade: action.card.maxGrade, minGrade: action.card.minGrade, page: action.card.page, pageCount: action.card.pageCount }\r\n\t\t}\r\n\t\tcase 'card/REMOVE-CARD': {\r\n\t\t\treturn { ...state, cards: state.cards.filter(card => card._id !== action.cardId) }\r\n\t\t}\r\n\t\tdefault: {\r\n\t\t\treturn state\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//Action Creators\r\nexport const setCardAC = (card: CardResType) => {\r\n\treturn { type: 'card/GET-CARD', card } as const\r\n}\r\n\r\nexport const removeCardAC = (cardId: string) => {\r\n\treturn { type: 'card/REMOVE-CARD', cardId } as const\r\n}\r\n\r\n\r\n//Thunks\r\n\r\nexport const getCardTC = (cardId: string, min: string = '1', max: string = '4', page: string = '1', pageCount: string = '7', cardAnswer: string = 'english', cardQuestion: string = 'english') => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t\tdispatch(setIsLoadingAC(true))\r\n\t\tgetCardAPI.getCardsFromPack(cardId, min, max, page, pageCount, cardAnswer, cardQuestion)\r\n\t\t\t.then(res => {\r\n\t\t\t\tdispatch(setIsLoadingAC(false));\r\n\t\t\t\tdispatch(setCardAC(res.data));\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tdispatch(setIsLoadingAC(false));\r\n\t\t\t\tconsole.log(err.message)\r\n\t\t\t})\r\n\t}\r\n}\r\n\r\nexport const addNewCardTC = (id: string, question?: string, answer?: string) => {\r\n\treturn (dispatch: ThunkDispatch<AppRootStateType, {}, ActionsType>) => {\r\n\t\tdispatch(setIsLoadingAC(true))\r\n\t\tgetCardAPI.addCard(id, question, answer)\r\n\t\t\t.then(res => {\r\n\t\t\t\tdispatch(getCardTC(id));\r\n\t\t\t\tdispatch(setIsLoadingAC(false));\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tdispatch(setIsLoadingAC(false));\r\n\t\t\t\tconsole.log(err.message)\r\n\t\t\t})\r\n\t}\r\n}\r\n\r\nexport const removeCardTC = (id: string) => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t\tdispatch(setIsLoadingAC(true));\r\n\t\tgetCardAPI.removeCard(id)\r\n\t\t\t.then(res => {\r\n\t\t\t\tdispatch(removeCardAC(id));\r\n\t\t\t\tdispatch(setIsLoadingAC(false))\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tdispatch(setIsLoadingAC(false));\r\n\t\t\t\tconsole.log(err.message);\r\n\t\t\t})\r\n\t}\r\n}\r\n\r\nexport const updateCardNameTC = (id: string, name: string, packId: string) => {\r\n\treturn (dispatch: ThunkDispatch<AppRootStateType, {}, ActionsType>) => {\r\n\t\tdispatch(setIsLoadingAC(true));\r\n\t\tgetCardAPI.updateCard(id, name)\r\n\t\t.then(res => {\r\n\t\t\tdispatch(setIsLoadingAC(false));\r\n\t\t\tdispatch(getCardTC(packId));\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\tdispatch(setIsLoadingAC(false));\r\n\t\t\tconsole.log(err.message);\r\n\t\t})\r\n\t}\r\n}\r\n\r\n\r\ntype ActionsType =\r\n\tReturnType<typeof setCardAC>\r\n\t| ReturnType<typeof setIsLoadingAC>\r\n\t| ReturnType<typeof removeCardAC>\r\n\r\nexport type CardResType = {\r\n\tcards: Array<CardType>,\r\n\tcardsTotalCount: number,\r\n\tmaxGrade: number,\r\n\tminGrade: number,\r\n\tpage: number\r\n\tpageCount: number,\r\n\tcardAnswer: string,\r\n\tcardQuestion: string,\r\n\tmin: number,\r\n\tmax: number\r\n}\r\n\r\nexport type CardType = {\r\n\tanswer: string\r\n\tquestion: string\r\n\tcardsPack_id: string\r\n\tgrade: number\r\n\trating: number\r\n\tshots: number\r\n\ttype: string\r\n\tuser_id: string\r\n\tcreated: string\r\n\tupdated: string\r\n\t__v: number\r\n\t_id: string\r\n}\r\n","import { useFormik } from 'formik';\r\nimport React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addNewCardTC } from '../../../bll/card-reducer';\r\n\r\ntype AddNewCardPropsType = {\r\n\tsetAddNewCardModal: (value: boolean) => void,\r\n\tpackId: string\r\n}\r\n\r\nconst AddNewCard = (props: AddNewCardPropsType) => {\r\n\r\n\tconst dispatch = useDispatch();\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\tquestion: '',\r\n\t\t\tanswer: ''\r\n\t\t},\r\n\t\tonSubmit: (values) => {\r\n\t\t\tdispatch(addNewCardTC(props.packId, values.question, values.answer))\r\n\t\t\tprops.setAddNewCardModal(false);\r\n\t\t\tvalues.answer = '';\r\n\t\t\tvalues.question = ''\r\n\t\t}\r\n\t})\r\n\r\n\treturn (\r\n\t\t<div className=\"row\">\r\n\t\t\t<form className=\"col s12\" onSubmit={formik.handleSubmit}>\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"input-field col s6\">\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tplaceholder={'Question'}\r\n\t\t\t\t\t\t\tid=\"question\"\r\n\t\t\t\t\t\t\tname=\"question\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tclassName=\"validate\"\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('question')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<label htmlFor=\"question\" className=\"active\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"input-field col s6\">\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tplaceholder={'Answer'}\r\n\t\t\t\t\t\t\tid=\"answer\"\r\n\t\t\t\t\t\t\tname={\"answer\"}\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tclassName=\"validate\"\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('answer')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<label htmlFor=\"answer\" className=\"active\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<button className=\"btn waves-effect waves-light\" type=\"submit\"\r\n\t\t\t\t\t\t\tname=\"action\">Add card\r\n                            <i className=\"material-icons right\">add</i>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default AddNewCard;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { CardType } from '../../bll/card-reducer';\r\nimport { AppRootStateType } from '../../bll/store';\r\n\r\ntype CardPropsType = {\r\n\tcard: Array<CardType>,\r\n\tupdateCardName: (id: string, name: string) => void,\r\n\tremoveCard: (id: string) => void\r\n}\r\n\r\nconst Card = (props: CardPropsType) => {\r\n\r\n\tconst userId = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n\r\n\tconst updateCardName = (id: string, name: string) => {\r\n\t\tprops.updateCardName(id, name);\r\n\t}\r\n\r\n\tconst removeCard = (id: string) => {\r\n\t\tprops.removeCard(id);\r\n\t}\r\n\r\n\tconst rows = props.card.map(card => {\r\n\t\treturn <tr key={card._id}>\r\n\t\t\t<td>{card.question}</td>\r\n\t\t\t<td>{card.answer}</td>\r\n\t\t\t<td>{card.rating}</td>\r\n\t\t\t<td>{card.updated}</td>\r\n\t\t\t<td>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<button style={{ marginRight: '5px' }} disabled={userId !== card.user_id} onClick={() => updateCardName(card._id, card.question)}\r\n\t\t\t\t\t\t\tclassName=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">\r\n\t\t\t\t\t\t\t<i className=\"material-icons\">edit</i>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button disabled={userId !== card.user_id} onClick={() => removeCard(card._id)}\r\n\t\t\t\t\t\t\tclassName=\"btn red waves-effect waves-light\" type=\"submit\" name=\"action\">\r\n\t\t\t\t\t\t\t<i className=\"material-icons\">delete_forever</i>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t})\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<table className={\"highlight\"}>\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th>Question</th>\r\n\t\t\t\t\t\t<th>Answer</th>\r\n\t\t\t\t\t\t<th>Rating</th>\r\n\t\t\t\t\t\t<th>Updated</th>\r\n\t\t\t\t\t\t<th>Manage</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t{rows}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Card;","import { useFormik } from 'formik';\r\nimport React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getCardTC, updateCardNameTC } from '../../../bll/card-reducer';\r\n\r\ntype EditCardPropsType = {\r\n\tid: string,\r\n\tname: string,\r\n\tsetNewCardNameModal: (value: boolean) => void,\r\n\tpackId: string,\r\n\r\n}\r\n\r\nconst EditCard = (props: EditCardPropsType) => {\r\n\r\n\tconst dispatch = useDispatch();\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\tid: props.id,\r\n\t\t\tquestion: props.name\r\n\t\t},\r\n\t\tonSubmit: (values) => {\r\n\t\t\tdispatch(updateCardNameTC(values.id, values.question, props.packId));\r\n\t\t\tprops.setNewCardNameModal(false);\r\n\t\t}\r\n\t})\r\n\r\n\treturn (\r\n\t\t<form className=\"col s12\" onSubmit={formik.handleSubmit}>\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"input-field col s12\">\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tplaceholder={'Question'}\r\n\t\t\t\t\t\tid=\"question\"\r\n\t\t\t\t\t\tname=\"question\"\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tclassName=\"validate\"\r\n\t\t\t\t\t\t{...formik.getFieldProps('question')}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<label htmlFor=\"question\" className=\"active\" />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"input-field col s12\">\r\n\t\t\t\t\t<button className=\"btn waves-effect waves-light\" type=\"submit\"\r\n\t\t\t\t\t\tname=\"action\">Update\r\n                        <i className=\"material-icons right\">update</i>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport default EditCard;","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect, useParams } from 'react-router-dom';\r\nimport { CardType, getCardTC, removeCardTC } from '../../bll/card-reducer';\r\nimport { AppRootStateType } from '../../bll/store';\r\nimport { Loading } from '../Common/Loading/Loading';\r\nimport { Modal } from '../Common/Modal/Modal';\r\nimport AddNewCard from './AddNewCard/AddNewCard';\r\nimport Card from './Card';\r\nimport EditCard from './EditCard/EditCard';\r\nimport {log} from \"util\";\r\n\r\ntype CardContainerPropsType = any\r\nlet idCard: string = '';\r\nlet cardName: string = '';\r\nconst CardContainer = (props: CardContainerPropsType) => {\r\n\r\n\tconst isLogged = useSelector<AppRootStateType, boolean>(state => state.app.isLogged);\r\n\tconst isLoading = useSelector<AppRootStateType, boolean>(state => state.app.isLoading);\r\n\tconst card = useSelector<AppRootStateType, Array<CardType>>(state => state.card.cards);\r\n\tconst [addNewCardModal, setAddNewCardModal] = useState(false);\r\n\tconst [newCardNameModal,setNewCardNameModal] = useState(false);\r\n\tlet { packId } = useParams();\r\n\tconst dispatch = useDispatch();\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(getCardTC(packId));\r\n\t\t// alert(packId);\r\n\t}, [])\r\n\r\n\tif (!isLogged) {\r\n\t\treturn <Redirect to={'/login'} />\r\n\t}\r\n\r\n\tconst updateCardName = (id: string, name: string) => {\r\n\t\tidCard = id;\r\n\t\tcardName = name;\r\n\t\tsetNewCardNameModal(true);\r\n\t}\r\n\r\n\tconst removeCard = (id: string) => {\r\n\t\tdispatch(removeCardTC(id));\r\n\t}\r\n\r\n\t// const card = [{\r\n\t// \tanswer: 'henlo',\r\n\t// question: 'string',\r\n\t// cardsPack_id: 'string',\r\n\t// grade: 1,\r\n\t// rating: 2,\r\n\t// shots: 1,\r\n\t// type: 'card',\r\n\t// user_id: '123123lknkjgf',\r\n\t// created: 'lksdmfdslf',\r\n\t// updated: 'string',\r\n\t// __v: 1342412351231,\r\n\t// _id: 'dkfgkldnfgkjndsmds123j8',\r\n\t// }]\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{/* {isLoading && <Loading />} */}\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Card</h1>\r\n\t\t\t\t<button onClick={() => setAddNewCardModal(true)}\r\n\t\t\t\tclassName=\"btn waves-effect waves-light\" type=\"submit\">New card\r\n\t\t\t\t<i className=\"material-icons right\">add</i>\r\n\t\t\t\t</button>\r\n\t\t\t\t<Card card={card} updateCardName={updateCardName} removeCard={removeCard}/>\r\n\t\t\t</div>\r\n\t\t\t<Modal modalActive={addNewCardModal} setModalActive={setAddNewCardModal}>\r\n\t\t\t\t<AddNewCard setAddNewCardModal={setAddNewCardModal}\r\n\t\t\t\tpackId={packId}/>\r\n\t\t\t</Modal>\r\n\t\t\t<Modal modalActive={newCardNameModal} setModalActive={setNewCardNameModal}>\r\n\t\t\t\t{!!idCard && !!cardName && <EditCard id={idCard} name={cardName} setNewCardNameModal={setNewCardNameModal} packId={packId}/>}\r\n\t\t\t</Modal>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\n\r\nexport default CardContainer\r\n","import React from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport Header from '../Header/Header';\r\nimport LoginContainer from '../Login/LoginContainer';\r\nimport NewPassContainer from '../NewPass/NewPassContainer';\r\nimport PageNotFound from '../PageNotFound/PageNotFound';\r\nimport ProfileContainer from '../Profile/ProfileContainer';\r\nimport RegistrationContainer from '../Registration/RegistrationContainer';\r\nimport ResetPassContainer from '../ResetPass/ResetPassContainer';\r\nimport RestorePassContainer from '../RestorePass/RestorePassContainer';\r\nimport {card, packs, login, newPass, profile, registration, resetPass, restorePass} from '../Routes/routes';\r\nimport PacksContainer from \"../Packs/PacksContainer\";\r\nimport CardContainer from '../Card/CardContainer';\r\n\r\nconst Main = () => {\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <Switch>\r\n                <Route path={login} render={() => <LoginContainer/>}/>\r\n                {/* <Route path={newPass} render={() => <NewPassContainer />} /> */}\r\n                <Route path={restorePass + '/:token'} render={() => <RestorePassContainer/>}/>\r\n                <Route path={resetPass} render={() => <ResetPassContainer/>}/>\r\n                <Route path={profile} render={() => <ProfileContainer/>}/>\r\n                <Route path={packs} render={() => <PacksContainer/>}/>\r\n                <Route path={card + '/:packId'} render={() => <CardContainer/>}/>\r\n                <Route path={card} render={() => <CardContainer/>}/>\r\n                <Route path={registration} render={() => <RegistrationContainer/>}/>\r\n                <Route render={() => <PageNotFound/>}/>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\n\timport './App.css';\r\nimport { AppRootStateType } from './bll/store';\r\nimport { Loading } from './ui/Common/Loading/Loading';\r\nimport Main from './ui/Main/Main';\r\n\r\nconst App = () => {\r\n\tconst isLoading = useSelector<AppRootStateType, boolean>(state => state.app.isLoading);\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t{isLoading && <Loading />}\r\n\t\t\t{/* hashRouter, provider */}\r\n\t\t\t<HashRouter>\r\n\t\t\t\t<Main/>\r\n\t\t\t</HashRouter>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\n//{/* <Header/> */}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type NewPassStateType = any\r\n\r\nexport type ActionsType = any;\r\n\r\nconst initialState = {}\r\n\r\nexport const newPasswordReducer = (state: NewPassStateType = initialState, action: ActionsType): NewPassStateType => {\r\n\tswitch(action.type) {\r\n\t\tdefault: {\r\n\t\t\treturn state\r\n\t\t}\r\n\t}\r\n}","import { restorePasswordReducer } from './restorePas-reducer';\r\nimport { registrationReducer } from './registration-reducer';\r\nimport { profileReducer } from './profile-reducer';\r\nimport { newPasswordReducer } from './newPass-reducer';\r\nimport { loginReducer } from './login-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { resetPasswordReducer } from './resetPass-reducer';\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {cardsReducer} from \"./cards-reducer\";\r\nimport { cardReducer } from './card-reducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    newPassword: newPasswordReducer,\r\n    profile: profileReducer,\r\n    registration: registrationReducer,\r\n    restorePassword: restorePasswordReducer,\r\n    resetPassword: resetPasswordReducer,\r\n    cards: cardsReducer,\r\n    card: cardReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport { store } from './bll/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}