{"version":3,"sources":["ui/Common/Input/Input.module.css","ui/Common/Button/Button.module.css","ui/Registration/Registration.module.css","ui/Header/Header.module.css","ui/Login/Login.module.css","ui/NewPass/NewPass.module.css","ui/PageNotFound/PageNotFound.module.css","ui/Profile/Profile.module.css","ui/ResetPass/ResetPass.module.css","ui/RestorePass/RestorePass.module.css","ui/Common/Loading/img/Spinner.svg","ui/Common/NavigationLink/NavigationLink.tsx","api/cardsAPI.ts","bll/app-reducer.ts","bll/profile-reducer.ts","bll/login-reducer.ts","ui/Header/Header.tsx","ui/Routes/routes.ts","ui/Common/Loading/Loading.tsx","ui/Login/Login.tsx","ui/Login/LoginContainer.tsx","ui/NewPass/NewPass.tsx","ui/NewPass/NewPassContainer.tsx","ui/PageNotFound/PageNotFound.tsx","api/restorePassAPI.ts","bll/restorePas-reducer.ts","ui/Profile/Profile.tsx","ui/Profile/ProfileContainer.tsx","api/registrationApi.ts","bll/registration-reducer.ts","ui/Registration/Registration.tsx","ui/Registration/RegistrationContainer.tsx","api/resetPassAPI.ts","bll/resetPass-reducer.ts","ui/ResetPass/ResetPassContainer.tsx","ui/RestorePass/RestorePassContainer.tsx","bll/cards-reducer.ts","ui/Cards/Cards.tsx","ui/Cards/NewCardPack/NewCardPack.tsx","ui/Cards/CardsContainer.tsx","ui/Main/Main.tsx","App.tsx","serviceWorker.ts","bll/newPass-reducer.ts","bll/store.ts","index.tsx"],"names":["module","exports","NavigationLink","props","to","title","instatce","axios","create","baseURL","withCredentials","authAPI","data","post","delete","cardApi","get","cardsPack","id","initialState","isLogged","isLoading","setIsLoggedAC","value","type","setIsLoadingAC","_id","email","name","publicCardPacksCount","NaN","created","updated","verified","rememberMe","error","setupProfileAC","authMeTC","dispatch","then","res","catch","err","setErrorLoginAC","Header","useSelector","state","app","useDispatch","className","style","navigation","onClick","e","message","Loading","src","require","alt","Login","React","memo","isError","login","useEffect","formik","useFormik","initialValues","password","validate","values","errors","test","length","onSubmit","handleSubmit","inputStyle","placeholder","getFieldProps","color","checked","buttonStyle","btn","disabled","LoginContainer","NewPass","newPass","NewPassContainer","newPassword","PageNotFound","exact","path","pageNotFound","instance","restorePassAPI","token","resetPasswordToken","answer","isRestored","restoreSendAC","send","Profile","userInfo","profile","ProfileContainer","ans","restorePassword","registerAPI","isRegistred","Registration","registration","repeatPassword","RegistrationContainer","resetPassAPI","from","isReseted","changeResetAnswerAC","text","ResetPassContainer","resetPassword","info","console","log","resetPass","onChange","handleChange","RestorePassContainer","useParams","secondPassword","restorePassTC","restorePass","textAlign","cardPacks","user_id","user_name","grade","shots","rating","__v","cardPacksTotalCount","maxCardsCount","page","pageCount","Cards","rows","cards","map","card","key","removeCardPack","NewCardPack","htmlFor","CardsContainer","useState","showForm","setShoForm","setRemoveCardPack","removeCardPackTC","Main","render","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","newState","filter","cardPack","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","unregister"],"mappings":"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","file":"static/js/main.83b6505c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputStyle\":\"Input_inputStyle__HrqX8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__1bX-5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registration\":\"Registration_registration__1Zql-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigation\":\"Header_navigation__21bQ6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__1Sbfj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPass\":\"NewPass_newPass__3VXDM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNotFound\":\"PageNotFound_pageNotFound__2VX4Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__2OmDN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"resetPass\":\"ResetPass_resetPass__3iysc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"restorePass\":\"RestorePass_restorePass__CaEjC\"};","module.exports = __webpack_public_path__ + \"static/media/Spinner.00a2f96b.svg\";","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\ntype NavigationLinkPropsType = {\n\tto: string,\n\ttitle: string\n}\n\nconst NavigationLink = (props: NavigationLinkPropsType) => {\n\treturn (\n\t\t<div>\n\t\t\t<NavLink to={props.to}>{props.title}</NavLink>\n\t\t</div>\n\t)\n}\n\nexport default NavigationLink;","import axios from 'axios'\nimport {LoginParamsType} from \"../bll/login-reducer\";\nimport {AddCardPackForm} from \"../ui/Cards/NewCardPack/NewCardPack\";\n\n\nconst settings = {\n    withCredentials: true\n}\n\nconst instatce = axios.create({\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\n    // baseURL: 'http://localhost:7542/2.0',\n    ...settings\n})\n\nexport const authAPI = {\n    login(data: LoginParamsType) {\n        return instatce.post('/auth/login', data)\n    },\n\n    authMe() {\n        return instatce.post('/auth/me', {})\n    },\n    logout() {\n        return instatce.delete('/auth/me', {})\n    }\n}\n\nexport const cardApi = {\n    getCardPack() {\n        return instatce.get('/cards/pack')\n    },\n    addCardPack(data: AddCardPackForm) {\n        return instatce.post('/cards/pack', {cardsPack: data})\n    },\n    removeCardPack(id: string) {\n        return instatce.delete(`/cards/pack?id=${id}`)\n    },\n    updateCardPack() {\n\n    }\n}\n","\nconst initialState: AppStateType = {\n    isLogged: false,\n    isLoading: false\n}\n\nexport const appReducer = (state: AppStateType = initialState, action: ActionsType): AppStateType => {\n    switch (action.type) {\n        case \"login/SET-IS-LOGGED\":\n            return {...state, isLogged: action.value}\n        case \"login/SET-IS-LOADING\":\n            return {...state, isLoading: action.value}\n        default: {\n            return state\n        }\n    }\n}\n\n// TYPES\nexport type AppStateType = {\n    isLogged: boolean\n    isLoading: boolean\n}\n\nexport type ActionsType =\n    | ReturnType<typeof setIsLoggedAC>\n    | ReturnType<typeof setIsLoadingAC>;\n\n\n// ACTIONS CREATORS\n\nexport const setIsLoggedAC = (value: boolean) => {\n    return {type: 'login/SET-IS-LOGGED', value} as const\n}\n\nexport const setIsLoadingAC = (value: boolean) => {\n    return {type: 'login/SET-IS-LOADING', value} as const\n}\n\n// THUNKS\n","import {authAPI} from \"../api/cardsAPI\";\nimport {useDispatch} from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport {setIsLoadingAC, setIsLoggedAC} from \"./app-reducer\";\n\nexport type ProfileStateType = {\n    _id: string\n    email: string\n    name: string\n    avatar?: string\n    publicCardPacksCount: number\n    created: Date | null\n    updated: Date | null\n    verified: boolean\n    rememberMe: boolean\n    error: string\n}\n\nexport type ActionsType =\n    | ReturnType<typeof setupProfileAC>\n    | ReturnType<typeof setIsLoadingAC>\n    | ReturnType<typeof setIsLoggedAC>;\n\nconst initialState: ProfileStateType = {\n    _id: '',\n    email: '',\n    name: '',\n    publicCardPacksCount: NaN,\n    created: null,\n    updated: null,\n    verified: false,\n    rememberMe: false,\n    error: ''\n}\n\nexport const profileReducer = (state: ProfileStateType = initialState, action: ActionsType): ProfileStateType => {\n    switch (action.type) {\n        case 'profile/SET-UP-PROFILE':\n            return {...state, ...action.data}\n        default: {\n            return state\n        }\n    }\n}\n//Actions Creators\nexport const setupProfileAC = (data: ProfileStateType) => {\n    return {type: 'profile/SET-UP-PROFILE', data} as const\n}\n\n// Thunks\nexport const authMeTC = () => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setIsLoadingAC(true))\n    authAPI.authMe()\n        .then(res => {\n            dispatch(setIsLoadingAC(false))\n            dispatch(setupProfileAC(res.data))\n            dispatch(setIsLoggedAC(true))\n        })\n        .catch(err => {\n            dispatch(setIsLoadingAC(false))\n        })\n}\n\n\n// Types\n","import {authAPI} from \"../api/cardsAPI\";\nimport {Dispatch} from \"redux\";\nimport {setupProfileAC} from \"./profile-reducer\";\nimport {setIsLoadingAC, setIsLoggedAC} from \"./app-reducer\";\n\nlet initialState: LoginStateType = {\n    isLogged: false,\n    error: ''\n}\n\nexport const loginReducer = (state: LoginStateType = initialState, action: ActionsType): LoginStateType => {\n    switch (action.type) {\n        case 'login/SET-ERROR-LOGIN':\n            return {...state, error: action.error}\n        default: {\n            return state\n        }\n    }\n}\n\n\n//Actions Creators\nconst setErrorLoginAC = (error: string) => {\n    return {type: 'login/SET-ERROR-LOGIN', error} as const\n}\n\n\n// Thunks\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setIsLoadingAC(true))\n    authAPI.login(data)\n        .then(res => {\n            dispatch(setIsLoadingAC(false))\n            dispatch(setupProfileAC(res.data))\n            dispatch(setIsLoggedAC(true))\n        })\n        .catch(e => {\n            dispatch(setIsLoadingAC(false))\n            dispatch(setErrorLoginAC(e.message))\n        })\n}\n\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setIsLoadingAC(true))\n    authAPI.logout()\n        .then(res => {\n            dispatch(setIsLoadingAC(false))\n            dispatch(setIsLoggedAC(false))\n        })\n        .catch(e => {\n            dispatch(setIsLoadingAC(false))\n            dispatch(setErrorLoginAC(e.message))\n        })\n}\n\n\n// Types\n\nexport type LoginStateType = {\n    isLogged: boolean\n    error: string\n}\n\n\nexport type ActionsType =\n    | ReturnType<typeof setIsLoggedAC>\n    | ReturnType<typeof setErrorLoginAC>\n    | ReturnType<typeof setupProfileAC>\n    | ReturnType<typeof setIsLoadingAC>;\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n}\n","import React from 'react';\nimport NavigationLink from '../Common/NavigationLink/NavigationLink';\nimport {login, logout, newPass, profile, registration, resetPass, restorePass, cards} from '../Routes/routes';\nimport style from './Header.module.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../bll/store\";\nimport {logoutTC} from \"../../bll/login-reducer\";\n\n\nconst Header = () => {\n\n    const isLogged = useSelector<AppRootStateType, boolean>(state => state.app.isLogged)\n    const dispatch = useDispatch()\n    const logoutHandler = () => {\n        dispatch(logoutTC())\n    }\n    return (\n        <nav className={style.navigation}>\n            {isLogged ? <button onClick={logoutHandler}>Logout</button> : <NavigationLink to={login} title={\"Login\"}/>}\n            <NavigationLink to={newPass} title={\"New password\"}/>\n            <NavigationLink to={restorePass} title={\"Restore password\"}/>\n            <NavigationLink to={profile} title={\"Profile\"}/>\n            <NavigationLink to={cards} title={\"Cards\"}/>\n            <NavigationLink to={resetPass} title={\"Reset password\"}/>\n            <NavigationLink to={registration} title={\"Registration\"}/>\n        </nav>\n    )\n}\n\nexport default Header;\n","export const login: string = '/login';\nexport const logout: string = '/logout';\nexport const newPass: string = '/newPassword';\nexport const profile: string = '/profile';\nexport const cards: string = '/cards';\nexport const restorePass: string = '/restorePassword';\nexport const registration: string = '/registration';\nexport const resetPass: string = '/resetPassword'\n// export const pageNotFound: string = '/pageNotFound_404';\n","import React from \"react\";\n\nexport const Loading = () => {\n    return (\n        <div>\n            <img src={require('./img/Spinner.svg')} alt=\"spinner loading\"/>\n        </div>\n    )\n}\n","import React, { useEffect } from 'react';\nimport style from './Login.module.css';\nimport inputStyle from '../Common/Input/Input.module.css'\nimport buttonStyle from '../Common/Button/Button.module.css'\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loginTC } from \"../../bll/login-reducer\";\nimport { AppRootStateType } from \"../../bll/store\";\nimport { Redirect } from 'react-router-dom';\nimport { authMeTC } from \"../../bll/profile-reducer\";\nimport { Loading } from \"../Common/Loading/Loading\";\n\ntype LoginPropType = any\n\nconst Login = React.memo((props: LoginPropType) => {\n\tconst isLogged = useSelector<AppRootStateType, boolean>(state => state.app.isLogged)\n\tconst isError = useSelector<AppRootStateType, string>(state => state.login.error)\n\tconst isLoading = useSelector<AppRootStateType, boolean>(state => state.app.isLoading)\n\tconst dispatch = useDispatch()\n\tuseEffect(() => {\n\t\tdispatch(authMeTC())\n\t}, [])\n\n\ttype FormikErrorType = {\n\t\temail?: string,\n\t\tpassword?: string\n\t}\n\n\tconst formik = useFormik({\n\t\tinitialValues: {\n\t\t\temail: '',\n\t\t\tpassword: '',\n\t\t\trememberMe: false\n\t\t},\n\t\tvalidate: (values) => {\n\t\t\tconst errors: FormikErrorType = {};\n\n\t\t\tif (!values.email) {\n\t\t\t\terrors.email = \"Requires\"\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n\t\t\t\terrors.email = \"Invalid email adress\"\n\t\t\t}\n\n\t\t\tif (!values.password) {\n\t\t\t\terrors.password = 'Required';\n\t\t\t} else if (values.password.length < 7) {\n\t\t\t\terrors.password = 'Password must be equal or more than 7 characters';\n\t\t\t}\n\t\t\treturn errors;\n\t\t},\n\t\tonSubmit: values => {\n\t\t\tdispatch(loginTC(values))\n\t\t}\n\t})\n\n\tif (isLogged) return <Redirect to={'/profile'} />\n\n\treturn (\n\t\t<div className={style.login}>\n\t\t\t{ isLoading && <Loading />}\n\t\t\t<h2>Login Page</h2>\n\t\t\t<form onSubmit={formik.handleSubmit}>\n\t\t\t\t<div>\n\t\t\t\t\t<input className={inputStyle.inputStyle}\n\t\t\t\t\t\tname={'email'}\n\t\t\t\t\t\ttype={'text'}\n\t\t\t\t\t\tplaceholder={'E-mail'}\n\t\t\t\t\t\t{...formik.getFieldProps('email')}\n\t\t\t\t\t/>\n\t\t\t\t\t{formik.values.email ? <div style={{ color: \"red\" }}>\n\t\t\t\t\t\t{formik.errors.email}\n\t\t\t\t\t</div> : null}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<input className={inputStyle.inputStyle}\n\t\t\t\t\t\tname={'password'}\n\t\t\t\t\t\ttype={'password'}\n\t\t\t\t\t\tplaceholder={'Password'}\n\t\t\t\t\t\t{...formik.getFieldProps('password')}\n\t\t\t\t\t/>\n\t\t\t\t\t{formik.values.password ? <div style={{ color: 'red' }}>\n\t\t\t\t\t\t{formik.errors.password}\n\t\t\t\t\t</div> : null}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<span>Remember Me </span>\n\t\t\t\t\t<input type={'checkbox'}\n\t\t\t\t\t\t{...formik.getFieldProps('rememberMe')}\n\t\t\t\t\t\tchecked={formik.values.rememberMe}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<button className={buttonStyle.btn}\n\t\t\t\t\t\ttype={'submit'}\n\t\t\t\t\t\tdisabled={isLoading}\n\t\t\t\t\t>Login\n                    </button>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t\t<div>\n\t\t\t\t{/*<Input value={'Choose the dark side'} onChange={(text: string) => console.log(text)}/>*/}\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t{/*<Button text={'we have cookies!:)'} onClick={() => alert('You have chosen wisely')} />*/}\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t{isError && <div> ${isError} </div>}\n\t\t\t</div>\n\n\t\t</div>\n\t)\n})\n\nexport default Login;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LoginStateType } from '../../bll/login-reducer';\nimport { AppRootStateType } from '../../bll/store';\nimport Login from './Login';\n\nconst LoginContainer = () => {\n\n\tconst login = useSelector<AppRootStateType, LoginStateType>(state => state.login);\n\tconst dispatch = useDispatch();\n\n\treturn (\n\t\t<Login />\n\t)\n}\n\nexport default LoginContainer;","import React from 'react';\nimport style from './NewPass.module.css';\n\ntype NewPassPropsType = any;\n\nconst NewPass = (props: NewPassPropsType) => {\n\treturn (\n\t\t<div className={style.newPass}>\n\t\t\t<h2>New Password Page</h2>\n\t\t</div>\n\t)\n}\n\nexport default NewPass;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NewPassStateType } from '../../bll/newPass-reducer';\nimport { AppRootStateType } from '../../bll/store';\nimport NewPass from './NewPass';\n\nconst NewPassContainer = () => {\n\n\tconst newPass = useSelector<AppRootStateType, NewPassStateType>(state => state.newPassword);\n\tconst dispatch = useDispatch();\n\n\treturn (\n\t\t<NewPass />\n\t)\n}\n\nexport default NewPassContainer;","import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport style from './PageNotFound.module.css';\n\nconst PageNotFound = () => {\n\n\tif (<Route exact path={'/'} />) {\n\t\treturn <Redirect to={'/login'} />\n\t}\n\n\treturn (\n\t\t<div className={style.pageNotFound}>\n\t\t\t<h2>\n\t\t\t\t<div>\n\t\t\t\t\t<span>PAGE NOT FOUND</span>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<span>404 ERROR!</span>\n\t\t\t\t</div>\n\t\t\t</h2>\n\t\t</div>\n\t)\n}\n\nexport default PageNotFound;","import axios from 'axios';\n\n\nconst settings = {\n    withCredentials: true\n}\n\nconst instance = axios.create({\n\tbaseURL: 'https://neko-back.herokuapp.com/2.0/',\n\t// baseURL: 'http://localhost:7542/2.0/',\n\t...settings\n});\n\nexport const restorePassAPI = {\n\trestorePass(password: string, token: string) {\n\t\t// debugger;\n\t\treturn instance.post('auth/set-new-password', {\n            password: password,\n            resetPasswordToken: token\n\t\t})\n\t},\n}\n","import { Dispatch } from \"redux\";\nimport { restorePassAPI } from \"../api/restorePassAPI\";\nimport {setIsLoadingAC} from \"./app-reducer\";\n\nexport type RestorePassStateType = {\n\tanswer: string,\n\tisRestored: boolean\n}\n\ntype ChangeRestoreAnswerActionType = {\n\ttype: 'restore/CHANGE-ANSWER',\n\tanswer: string,\n}\ntype isRestoredActionType = {\n\ttype: 'restore/CHANGE-STATUS',\n\tisRestored: boolean,\n}\n\nexport type ActionsType = ChangeRestoreAnswerActionType | isRestoredActionType;\n\nconst initialState: RestorePassStateType = {\n\tanswer: '',\n\tisRestored: false\n};\n\nexport const restorePasswordReducer = (state: RestorePassStateType = initialState, action: ActionsType): RestorePassStateType => {\n\tswitch (action.type) {\n\t\tcase \"restore/CHANGE-ANSWER\": {\n\t\t\treturn { ...state, answer: action.answer }\n\t\t}\n\t\tdefault: {\n\t\t\treturn state\n\t\t}\n\t}\n}\n\n//actions\n\nexport const changeRestoreAnswerAC = (text: string): ChangeRestoreAnswerActionType => {\n\treturn { type: \"restore/CHANGE-ANSWER\", answer: text }\n}\n\nexport const restoreSendAC = (send: boolean): isRestoredActionType => {\n\treturn { type: \"restore/CHANGE-STATUS\", isRestored: send }\n}\n\n//thunk\nexport const restorePassTC = (password: string, token: string) => {\n\treturn (dispatch: Dispatch) => {\n\t\tdispatch(setIsLoadingAC(true))\n\t\trestorePassAPI.restorePass(password, token)\n\t\t\t.then(res => {\n\t\t\t\tdispatch(setIsLoadingAC(false))\n\t\t\t\tdispatch(changeRestoreAnswerAC(res.data.info));\n\t\t\t\tdispatch(restoreSendAC(true))\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tdispatch(setIsLoadingAC(false))\n\t\t\t\tconsole.log(err.error);\n\t\t\t})\n\t}\n}\n","import React, {useEffect} from 'react';\nimport style from './Profile.module.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {authMeTC, ProfileStateType} from \"../../bll/profile-reducer\";\nimport {AppRootStateType} from \"../../bll/store\";\nimport { Redirect } from 'react-router-dom';\nimport {Loading} from \"../Common/Loading/Loading\";\n\ntype ProfilePropsType = any\n\nconst Profile = (props: ProfilePropsType) => {\n    const isLogged = useSelector<AppRootStateType, boolean>(state => state.app.isLogged)\n    const userInfo = useSelector<AppRootStateType, ProfileStateType>(state => state.profile)\n    const isLoading = useSelector<AppRootStateType, boolean>(state => state.app.isLoading)\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(authMeTC())\n    }, [])\n\n    if (!isLogged) {\n        return <Redirect to={'/login'}/>\n    }\n\n    return (\n        <div className={style.profile}>\n            { isLoading && <Loading/> }\n            {/*<h2>Profile Page</h2>*/}\n            <div>Email: {userInfo.email}</div>\n            <div>Name: {userInfo.name}</div>\n            <div>Created: {userInfo.created}</div>\n            <div>publicCardPacksCount: {userInfo.publicCardPacksCount}</div>\n        </div>\n    )\n}\n\nexport default Profile;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { restoreSendAC } from '../../bll/restorePas-reducer';\nimport { AppRootStateType } from '../../bll/store';\nimport Profile from './Profile';\n\nconst ProfileContainer = () => {\n\n\tconst isRestored = useSelector<AppRootStateType, boolean>(ans => ans.restorePassword.isRestored); \n\tconst dispatch = useDispatch();\n\n\tif(isRestored) dispatch(restoreSendAC(false))\n\n\treturn (\n\t\t<Profile />\n\t)\n}\n\nexport default ProfileContainer;","import axios from 'axios';\n\n\nconst settings = {\n    withCredentials: true\n}\n\nconst instance = axios.create({\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\n    // baseURL: 'http://localhost:7542/2.0/',\n    ...settings\n});\n\ntype RegistrationResponse = {\n    error: string,\n    method: string,\n    url: string,\n    query: {},\n    body: {}\n}\n\nexport type RegistrationParamsType = {\n    email: string,\n    password: string\n}\n\nexport const registerAPI = {\n    registration<RegistrationResponse>(data: RegistrationParamsType) {\n        return instance.post('auth/register', {\n            email: data.email,\n            password: data.password\n        })\n    },\n}\n\n","import {Dispatch} from \"redux\";\nimport {registerAPI, RegistrationParamsType} from \"../api/registrationApi\";\nimport {setIsLoadingAC} from \"./app-reducer\";\n\nexport type RegistrationStateType = any\n\nexport type ActionsType = any;\n\nconst initialState: RegistrationStateType = {\n    isRegistred: false\n}\n\ntype InitialStateType = typeof initialState\n\nexport const registrationReducer = (state: RegistrationStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'CREATE-REGISTRATION': {\n            return {...state, isRegistred: action.value}\n        }\n        default: {\n            return state\n        }\n    }\n}\n\n// actions\nexport const registrationAC = (value: boolean) =>\n    ({type: 'CREATE-REGISTRATION', value} as const)\n\n// thunks\nexport const registrationTC = (data: RegistrationParamsType) => (dispatch: Dispatch) => {\n    dispatch(setIsLoadingAC(true))\n    registerAPI.registration(data)\n        .then(res => {\n                dispatch(setIsLoadingAC(false))\n                dispatch(registrationAC(true))\n            }\n        )\n        .catch((err) => {\n            dispatch(setIsLoadingAC(false))\n        })\n}\n\nexport const test111 = () => () => {\n    debugger\n}\n","import React from 'react';\nimport style from './Registration.module.css'\nimport inputStyle from \"../Common/Input/Input.module.css\";\nimport buttonStyle from \"../Common/Button/Button.module.css\";\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppRootStateType } from \"../../bll/store\";\nimport { Redirect } from 'react-router-dom'\nimport { registrationTC } from \"../../bll/registration-reducer\";\nimport {Loading} from \"../Common/Loading/Loading\";\n\ntype RegistrationPropsType = any\n\nconst Registration = (props: RegistrationPropsType) => {\n\n\tconst isRegistred = useSelector<AppRootStateType, boolean>(state => state.registration.isRegistred);\n\tconst isLoading = useSelector<AppRootStateType, boolean>(state => state.app.isLoading)\n\tconst dispatch = useDispatch()\n\n\ttype FormikErrorType = {\n\t\temail?: string,\n\t\tpassword?: string\n\t\trepeatPassword?: string\n\t}\n\n\tconst formik = useFormik({\n\t\tinitialValues: {\n\t\t\temail: '',\n\t\t\tpassword: '',\n\t\t\trepeatPassword: ''\n\t\t},\n\t\tvalidate: (values) => {\n\t\t\tconst errors: FormikErrorType = {};\n\t\t\tif (!values.email) {\n\t\t\t\terrors.email = \"Requires\"\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n\t\t\t\terrors.email = \"Invalid email adress\"\n\t\t\t}\n\n\t\t\tif (!values.password) {\n\t\t\t\terrors.password = 'Required';\n\t\t\t} else if (values.password.length < 7) {\n\t\t\t\terrors.password = 'Password must be equal or more than 7 characters';\n\t\t\t}\n\n\t\t\tif (!values.repeatPassword) {\n\t\t\t\terrors.repeatPassword = 'Required'\n\t\t\t} else if (values.repeatPassword.length < 7) {\n\t\t\t\terrors.repeatPassword = 'Password must equal or be more than 7 characters';\n\t\t\t}\n\n\t\t\tif (values.password !== values.repeatPassword) {\n\t\t\t\terrors.repeatPassword = 'Password should be the same!'\n\t\t\t}\n\n\t\t\treturn errors;\n\t\t},\n\t\tonSubmit: values => {\n\t\t\tdispatch(registrationTC({ email: values.email, password: values.password }))\n\t\t},\n\t})\n\n\n\tif (isRegistred) {\n\t\treturn <Redirect to={\"/profile\"} />\n\t}\n\n\treturn (\n\t\t<div className={style.registration}>\n\t\t\t{ isLoading && <Loading />}\n\t\t\t<h2>Registration Page</h2>\n\t\t\t<div className={style.login}>\n\t\t\t\t<form onSubmit={formik.handleSubmit}>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input className={inputStyle.inputStyle}\n\t\t\t\t\t\t\ttype={'text'}\n\t\t\t\t\t\t\tplaceholder={'E-mail'}\n\t\t\t\t\t\t\tname={'email'}\n\t\t\t\t\t\t\t{...formik.getFieldProps('email')}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{formik.values.email ? <div style={{ color: \"red\" }}>\n\t\t\t\t\t\t\t{formik.errors.email}\n\t\t\t\t\t\t</div> : null}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input className={inputStyle.inputStyle}\n\t\t\t\t\t\t\ttype={'password'}\n\t\t\t\t\t\t\tplaceholder={'Password'}\n\t\t\t\t\t\t\tname={'password'}\n\t\t\t\t\t\t\t{...formik.getFieldProps('password')} />\n\t\t\t\t\t\t{formik.values.password ? <div style={{ color: 'red' }}>\n\t\t\t\t\t\t\t{formik.errors.password}\n\t\t\t\t\t\t</div> : null}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input className={inputStyle.inputStyle}\n\t\t\t\t\t\t\ttype={'password'}\n\t\t\t\t\t\t\tplaceholder={'Password'}\n\t\t\t\t\t\t\tname={'repeatPassword'}\n\t\t\t\t\t\t\t{...formik.getFieldProps('repeatPassword')} />\n\t\t\t\t\t\t{formik.values.repeatPassword ? <div style={{ color: 'red' }}>\n\t\t\t\t\t\t\t{formik.errors.repeatPassword}\n\t\t\t\t\t\t</div> : null}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button className={buttonStyle.btn}\n\t\t\t\t\t\t\ttype={'submit'}\n\t\t\t\t\t\t\tdisabled={formik.values.password !== formik.values.repeatPassword}\n\t\t\t\t\t\t>Registration\n                        </button>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Registration;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RegistrationStateType } from '../../bll/registration-reducer';\nimport { AppRootStateType } from '../../bll/store';\nimport Registration from './Registration';\n\nconst RegistrationContainer = () => {\n\n\tconst registration = useSelector<AppRootStateType, RegistrationStateType>(state => state.registration);\n\tconst dispatch = useDispatch();\n\n\treturn (\n\t\t<Registration/>\n\t)\n}\n\nexport default RegistrationContainer;","import axios from 'axios';\n\n\nconst settings = {\n    withCredentials: true\n}\n\nconst instance = axios.create({\n\tbaseURL: 'https://neko-back.herokuapp.com/2.0/',\n\t...settings\n});\n\nexport const resetPassAPI = {\n\tresetPass(email: string) {\n\t\t// debugger;\n\t\treturn instance.post('auth/forgot', {\n\t\t\temail: email,\n\t\t\tfrom: \"test-front-admin <ai73a@yandex.by>\",\n\t\t\tmessage: `<div style=\"background-color: lime; padding: 15px\">\n            \tpassword recovery link: \n            \t<a href='https://shein92.github.io/cards/#/restorePassword/$token$'>\n            \tlink</a></div>`\n\t\t})\n\t\t// <a href='http://localhost:3000/cards#/restorePassword/$token$'>\n\t},\n}\n","import { resetPassAPI } from '../api/resetPassAPI';\nimport { Dispatch } from \"redux\";\nimport {setIsLoadingAC} from \"./app-reducer\";\n\nexport type ResetPassStateType = {\n\tanswer: string,\n\tisReseted: boolean\n}\n\ntype ChangeAnswerActionType = {\n\ttype: \"reset/CHANGE-ANSWER\",\n\tanswer: string\n}\ntype IsResetSentActionType = {\n\ttype: \"reset/CHANGE-STATUS\",\n\tisReseted: boolean\n}\n\nexport type ActionsType = ChangeAnswerActionType | IsResetSentActionType;\n\nconst initialState: ResetPassStateType = {\n\tanswer: '',\n\tisReseted: false\n};\n\nexport const resetPasswordReducer = (state: ResetPassStateType = initialState, action: ActionsType): ResetPassStateType => {\n\tswitch (action.type) {\n\t\tcase \"reset/CHANGE-ANSWER\": {\n\t\t\treturn { ...state, answer: action.answer }\n\t\t}\n\t\tcase \"reset/CHANGE-STATUS\": {\n\t\t\treturn {...state, isReseted: action.isReseted}\n\t\t}\n\t\tdefault: {\n\t\t\treturn state\n\t\t}\n\t}\n}\n\n//actions\nexport const changeResetAnswerAC = (text: string): ChangeAnswerActionType => {\n\treturn { type: \"reset/CHANGE-ANSWER\", answer: text }\n}\nexport const resetSendAC = (send: boolean): IsResetSentActionType => {\n\treturn { type: \"reset/CHANGE-STATUS\", isReseted: send }\n}\n\n//thunk\nexport const resetPassTC = (email: string) => {\n\treturn (dispatch: Dispatch) => {\n\t\tdispatch(setIsLoadingAC(true))\n\t\tresetPassAPI.resetPass(email)\n\t\t\t.then(res => {\n\t\t\t\tdispatch(setIsLoadingAC(false))\n\t\t\t\tdispatch(changeResetAnswerAC(res.data.info));\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tdispatch(setIsLoadingAC(false))\n\t\t\t\tdispatch(changeResetAnswerAC(err.message));\n\t\t\t\tconsole.log(err);\n\t\t\t})\n\t}\n}\n","import { useFormik } from 'formik';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { resetPassTC } from '../../bll/resetPass-reducer';\nimport { AppRootStateType } from '../../bll/store';\nimport { profile } from '../Routes/routes';\nimport style from './ResetPass.module.css';\nimport inputStyle from '../Common/Input/Input.module.css';\nimport btn from '../Common/Button/Button.module.css';\n\nconst ResetPassContainer = React.memo(() => {\n\n\tlet answer = useSelector<AppRootStateType, string>(ans => ans.resetPassword.answer);\n\tlet isReseted = useSelector<AppRootStateType, boolean>(ans => ans.resetPassword.isReseted);\n\tlet dispatch = useDispatch();\n\n\ttype FormikErrorType = {\n\t\temail?: string\n\t}\n\n\tconst formik = useFormik({\n\t\tinitialValues: {\n\t\t\temail: '',\n\t\t},\n\t\tvalidate: (values) => {\n\t\t\tconst errors: FormikErrorType = {};\n\t\t\tif (!values.email) {\n\t\t\t\terrors.email = \"Requires\"\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n\t\t\t\terrors.email = \"Invalid email adress\"\n\t\t\t}\n\t\t\treturn errors;\n\t\t},\n\t\tonSubmit: values => {\n\t\t\tdebugger;\n\t\t\tdispatch(resetPassTC(values.email));\n\t\t},\n\t});\n\n\tif (isReseted) return <Redirect to={profile} />\n\n\treturn (\n\t\t<div className={style.resetPass}>\n\t\t\t<form onSubmit={formik.handleSubmit}>\n\t\t\t\t<div>\n\t\t\t\t\t<span>Your email adress: </span>\n\t\t\t\t</div>\n\t\t\t\t<input className={inputStyle.inputStyle}\n\t\t\t\t\tname={'email'}\n\t\t\t\t\ttype={\"text\"}\n\t\t\t\t\tplaceholder={'E-mail'}\n\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\tvalue={formik.values.email}\n\t\t\t\t/>\n\t\t\t\t{formik.values.email ? <div style={{ color: \"red\" }}>\n\t\t\t\t\t{formik.errors.email}\n\t\t\t\t</div> : null}\n\t\t\t\t<div>\n\t\t\t\t\t<button className={btn.btn} \n\t\t\t\t\ttype={\"submit\"}>Submit</button>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t\t{answer}\n\t\t</div>\n\t);\n})\n\nexport default ResetPassContainer;","import { useFormik } from 'formik';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect, useParams } from 'react-router-dom';\nimport { restorePassTC } from '../../bll/restorePas-reducer';\nimport { AppRootStateType } from '../../bll/store';\nimport { profile } from '../Routes/routes';\nimport style from './RestorePass.module.css';\nimport inputStyle from '../Common/Input/Input.module.css';\nimport btn from '../Common/Button/Button.module.css';\nimport {Loading} from \"../Common/Loading/Loading\";\n\nconst RestorePassContainer = React.memo(() => {\n\n\tlet answer = useSelector<AppRootStateType, string>(ans => ans.restorePassword.answer);\n\tconst isRestored = useSelector<AppRootStateType, boolean>(ans => ans.restorePassword.isRestored);\n\tconst isLoading = useSelector<AppRootStateType, boolean>(state => state.app.isLoading)\n\tconst dispatch = useDispatch();\n\tlet { token } = useParams();\n\n\ttype FormikErrorType = {\n\t\tpassword?: string\n\t\tsecondPassword?: string\n\t}\n\n\tconst formik = useFormik({\n\t\tinitialValues: {\n\t\t\tpassword: '',\n\t\t\tsecondPassword: ''\n\t\t},\n\t\tvalidate: (values) => {\n\t\t\tconst errors: FormikErrorType = {};\n\n\t\t\tif (!values.password) {\n\t\t\t\terrors.password = 'Required';\n\t\t\t} else if (values.password.length < 7) {\n\t\t\t\terrors.password = 'Password must be equal or more than 7 characters';\n\t\t\t}\n\n\t\t\tif (!values.secondPassword) {\n\t\t\t\terrors.secondPassword = 'Required'\n\t\t\t} else if (values.secondPassword.length < 7) {\n\t\t\t\terrors.secondPassword = 'Password must be equal or more than 7 characters';\n\t\t\t}\n\n\t\t\tif (values.password !== values.secondPassword) {\n\t\t\t\terrors.secondPassword = 'Password should be the same!'\n\t\t\t}\n\n\t\t\treturn errors;\n\t\t},\n\t\tonSubmit: values => {\n\t\t\tdispatch(restorePassTC(values.password, token))\n\t\t}\n\t});\n\n\tif (isRestored) { return <Redirect to={profile} /> }\n\n\treturn (\n\t\t<div className={style.restorePass} style={{ textAlign: 'center' }}>\n\t\t\t{ isLoading && <Loading />}\n\t\t\t<form onSubmit={formik.handleSubmit}>\n\t\t\t\t<div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span>Password: </span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<input className={inputStyle.inputStyle}\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tname={\"password\"}\n\t\t\t\t\t\tplaceholder={'Password'}\n\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\tvalue={formik.values.password}\n\t\t\t\t\t/>\n\t\t\t\t\t{formik.values.password ? <div style={{ color: 'red' }}>\n\t\t\t\t\t\t{formik.errors.password}\n\t\t\t\t\t</div> : null}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span>Repeat password</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<input className={inputStyle.inputStyle}\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tname={\"secondPassword\"}\n\t\t\t\t\t\tplaceholder={'Password'}\n\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\tvalue={formik.values.secondPassword}\n\t\t\t\t\t/>\n\t\t\t\t\t{formik.values.secondPassword ? <div style={{ color: 'red' }}>\n\t\t\t\t\t\t{formik.errors.secondPassword}\n\t\t\t\t\t</div> : null}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<button className={btn.btn}\n\t\t\t\t\t\ttype={\"submit\"}\n\t\t\t\t\t\tdisabled={formik.values.password !== formik.values.secondPassword}\n\t\t\t\t\t>Send</button>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t\t<div>\n\t\t\t\t{answer}\n\t\t\t</div>\n\t\t</div>\n\t)\n\n\t// return (\n\t// \t<RestorePass/>\n\t// )\n})\n\nexport default RestorePassContainer;\n","import {Dispatch} from \"redux\";\nimport {setIsLoadingAC, setIsLoggedAC} from \"./app-reducer\";\nimport {cardApi} from \"../api/cardsAPI\";\nimport {AddCardPackForm} from \"../ui/Cards/NewCardPack/NewCardPack\";\n\nlet initialState: CardResponseType = {\n    cardPacks: [\n        {\n            _id: '',\n            user_id: '',\n            name: '',\n            user_name: '',\n            path: '',\n            grade: 0,\n            shots: 0,\n            rating: 0,\n            type: '',\n            created: '',\n            updated: '',\n            __v: 0\n        }\n    ],\n    cardPacksTotalCount: 0,\n    maxCardsCount: 0,\n    page: 0,\n    pageCount: 0\n}\n\n\nexport const cardsReducer = (state: CardResponseType = initialState, action: ActionsType): CardResponseType => {\n    switch (action.type) {\n        case 'cards/GET-CARDS':\n            return {...action.cards}\n        case 'cards/REMOVE-CARD-PACK':\n            const newState=  {...state, cardPacks: state.cardPacks.filter(cardPack => cardPack._id !== action.id)}\n            return newState\n        default: {\n            return state\n        }\n    }\n}\n\n\n//Actions Creators\nconst setCardsAC = (cards: CardResponseType) => {\n    return {type: 'cards/GET-CARDS', cards} as const\n}\n\nconst setRemoveCardPack = (id: string) => {\n    return {type: 'cards/REMOVE-CARD-PACK', id} as const\n}\n\n\n// Thunks\nexport const getCardsTC = () => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setIsLoadingAC(true))\n    cardApi.getCardPack()\n        .then(res => {\n            dispatch(setIsLoadingAC(false))\n            dispatch(setCardsAC(res.data))\n        })\n        .catch(e => {\n            dispatch(setIsLoadingAC(false))\n        })\n}\n\nexport const removeCardPackTC = (id: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setIsLoadingAC(true))\n    cardApi.removeCardPack(id)\n        .then(res => {\n            dispatch(setIsLoadingAC(false))\n            dispatch(setRemoveCardPack(id))\n        })\n        .catch(e => {\n            dispatch(setIsLoadingAC(false))\n        })\n}\n\nexport const addCardPackTC = (data: AddCardPackForm) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setIsLoadingAC(true))\n    cardApi.addCardPack(data)\n        .then(res => {\n            dispatch(setIsLoadingAC(false))\n        })\n        .catch(e => {\n            dispatch(setIsLoadingAC(false))\n        })\n}\n\n\n// Types\n\nexport type CardPacksType = {\n    _id: string,\n    user_id: string,\n    user_name: string,\n    name: string,\n    path: string,\n    grade: number,\n    shots: number,\n    rating: number,\n    type: string,\n    created: string,\n    updated: string,\n    __v: number\n}\n\nexport type CardResponseType = {\n    cardPacks: Array<CardPacksType>\n    cardPacksTotalCount: number\n    maxCardsCount: number\n    page: number\n    pageCount: number\n}\n\nexport type ActionsType =\n    | ReturnType<typeof setIsLoggedAC>\n    | ReturnType<typeof setIsLoadingAC>\n    | ReturnType<typeof setCardsAC>\n    | ReturnType<typeof setRemoveCardPack>\n\n","import React from 'react';\nimport {CardPacksType} from \"../../bll/cards-reducer\";\n\ntype CardsPropsType = {\n    cards: Array<CardPacksType>\n    removeCardPack: (id: string) => void\n}\n\nconst Cards = (props: CardsPropsType) => {\n    const removeHandler = (id: string) => {\n        props.removeCardPack(id)\n    }\n    const rows = props.cards.map((card) =>\n        <tr key={card._id}>\n            <td>{card.name}</td>\n            <td>{card.user_name}</td>\n            <td>{card.rating}</td>\n            <td>{card.shots}</td>\n            <td>\n                <div>\n                    <div>\n                        <button className=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">\n                            <i className=\"material-icons\">edit</i>\n                        </button>\n                        <button onClick={() => removeHandler(card._id)} className=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">\n                            <i className=\"material-icons\">delete_forever</i>\n                        </button>\n                    </div>\n                </div>\n            </td>\n        </tr>\n    )\n    return (\n        <div>\n            <table className={\"highlight\"}>\n                <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>User Name</th>\n                    <th>Rating</th>\n                    <th>Shots</th>\n                    <th>Manage</th>\n                </tr>\n                </thead>\n                <tbody>\n                {rows}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default Cards;\n","import React from \"react\";\nimport {useFormik} from \"formik\";\nimport {addCardPackTC} from \"../../../bll/cards-reducer\";\nimport {useDispatch} from \"react-redux\";\n\nexport type AddCardPackForm = {\n    name?: string,\n    path?: string\n}\n\ntype NewCardPackPropsType = {}\n\nexport const NewCardPack = (props: NewCardPackPropsType) => {\n    const dispatch = useDispatch()\n    const formik = useFormik({\n        initialValues: {\n            name: '',\n            path: ''\n        },\n        onSubmit: values => {\n            dispatch(addCardPackTC(values))\n        }\n    })\n\n\n    return (\n        <div className=\"row\">\n            <form className=\"col s12\" onSubmit={formik.handleSubmit}>\n                <div className=\"row\">\n                    <div className=\"input-field col s6\">\n                        <input\n                            id=\"name\"\n                            name=\"name\"\n                            type=\"text\"\n                            className=\"validate\"\n                            {...formik.getFieldProps('name')}\n                        />\n                        <label htmlFor=\"name\">Name</label>\n                    </div>\n                    <div className=\"input-field col s6\">\n                        <input\n                            id=\"path\"\n                            name={\"path\"}\n                            type=\"text\"\n                            className=\"validate\"\n                            {...formik.getFieldProps('path')}\n                        />\n                        <label htmlFor=\"path\">Path</label>\n                    </div>\n                    <div>\n                        <button className=\"btn waves-effect waves-light\" type=\"submit\"\n                                name=\"action\">Create\n                            <i className=\"material-icons right\">add</i>\n                        </button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    )\n}\n","import React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../bll/store\";\nimport {Redirect} from 'react-router-dom';\nimport {Loading} from \"../Common/Loading/Loading\";\nimport {CardPacksType, CardResponseType, getCardsTC, removeCardPackTC} from \"../../bll/cards-reducer\";\nimport Cards from \"./Cards\";\nimport { NewCardPack } from './NewCardPack/NewCardPack';\n\ntype ProfilePropsType = any\n\nconst CardsContainer = (props: ProfilePropsType) => {\n    const isLogged = useSelector<AppRootStateType, boolean>(state => state.app.isLogged)\n    const isLoading = useSelector<AppRootStateType, boolean>(state => state.app.isLoading)\n    const cards = useSelector<AppRootStateType, Array<CardPacksType>>(state => state.cards.cardPacks)\n    const [showForm, setShoForm] = useState(false)\n    const dispatch = useDispatch()\n\n    const removeCardPack = (id: string) => {\n        dispatch(removeCardPackTC(id))\n    }\n\n    const addCardPackHandler = () => {\n        setShoForm(true)\n    }\n\n    useEffect(() => {\n        dispatch(getCardsTC())\n    }, [])\n\n\n    if (!isLogged) {\n        return <Redirect to={'/login'}/>\n    }\n\n    return (\n\n        <div className={'cards'}>\n            {isLoading && <Loading/>}\n            {showForm && <NewCardPack/>}\n            <div>\n                <div>\n                    <h1>CARDS</h1>\n                    <button onClick={addCardPackHandler} className=\"btn waves-effect waves-light\" type=\"submit\"\n                            name=\"action\">New Pack\n                        <i className=\"material-icons right\">add</i>\n                    </button>\n                </div>\n                <Cards cards={cards} removeCardPack={removeCardPack}/>\n            </div>\n        </div>\n    )\n}\n\nexport default CardsContainer;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Header from '../Header/Header';\nimport LoginContainer from '../Login/LoginContainer';\nimport NewPassContainer from '../NewPass/NewPassContainer';\nimport PageNotFound from '../PageNotFound/PageNotFound';\nimport ProfileContainer from '../Profile/ProfileContainer';\nimport RegistrationContainer from '../Registration/RegistrationContainer';\nimport ResetPassContainer from '../ResetPass/ResetPassContainer';\nimport RestorePassContainer from '../RestorePass/RestorePassContainer';\nimport {cards, login, newPass, profile, registration, resetPass, restorePass} from '../Routes/routes';\nimport CardsContainer from \"../Cards/CardsContainer\";\n\nconst Main = () => {\n\treturn (\n\t\t<div>\n\t\t\t<Header />\n\t\t\t<Switch>\n\t\t\t\t<Route path={login} render={() => <LoginContainer />} />\n\t\t\t\t<Route path={newPass} render={() => <NewPassContainer />} />\n\t\t\t\t<Route path={restorePass + '/:token'} render={() => <RestorePassContainer />} />\n\t\t\t\t<Route path={resetPass} render={() => <ResetPassContainer/>}/>\n\t\t\t\t<Route path={profile} render={() => <ProfileContainer />} />\n\t\t\t\t<Route path={cards} render={() => <CardsContainer />} />\n\t\t\t\t<Route path={registration} render={() => <RegistrationContainer />} />\n\t\t\t\t<Route render={() => <PageNotFound/>}/>\n\t\t\t</Switch>\n\t\t</div>\n\t)\n}\n\nexport default Main;\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\n\timport './App.css';\nimport Main from './ui/Main/Main';\n\nconst App = () => {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{/* hashRouter, provider */}\n\t\t\t<HashRouter>\n\t\t\t\t<Main/>\n\t\t\t</HashRouter>\n\t\t</div>\n\t);\n}\n\n\n//{/* <Header/> */}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type NewPassStateType = any\n\nexport type ActionsType = any;\n\nconst initialState = {}\n\nexport const newPasswordReducer = (state: NewPassStateType = initialState, action: ActionsType): NewPassStateType => {\n\tswitch(action.type) {\n\t\tdefault: {\n\t\t\treturn state\n\t\t}\n\t}\n}","import { restorePasswordReducer } from './restorePas-reducer';\nimport { registrationReducer } from './registration-reducer';\nimport { profileReducer } from './profile-reducer';\nimport { newPasswordReducer } from './newPass-reducer';\nimport { loginReducer } from './login-reducer';\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport thunkMiddleware from 'redux-thunk'\nimport { resetPasswordReducer } from './resetPass-reducer';\nimport {appReducer} from \"./app-reducer\";\nimport {cardsReducer} from \"./cards-reducer\";\n\n\nconst rootReducer = combineReducers({\n    login: loginReducer,\n    newPassword: newPasswordReducer,\n    profile: profileReducer,\n    registration: registrationReducer,\n    restorePassword: restorePasswordReducer,\n    resetPassword: resetPasswordReducer,\n    cards: cardsReducer,\n    app: appReducer\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport { store } from './bll/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}