{"version":3,"sources":["ui/Common/Input/Input.module.css","ui/Common/Button/Button.module.css","ui/Registration/Registration.module.css","ui/Header/Header.module.css","ui/Login/Login.module.css","ui/NewPass/NewPass.module.css","ui/PageNotFound/PageNotFound.module.css","ui/Profile/Profile.module.css","ui/ResetPass/ResetPass.module.css","ui/RestorePass/RestorePass.module.css","ui/Common/Loading/img/Spinner.svg","ui/Common/NavigationLink/NavigationLink.tsx","api/cardsAPI.ts","bll/app-reducer.ts","bll/profile-reducer.ts","bll/login-reducer.ts","ui/Header/Header.tsx","ui/Routes/routes.ts","ui/Common/Loading/Loading.tsx","ui/Login/Login.tsx","ui/Login/LoginContainer.tsx","ui/NewPass/NewPass.tsx","ui/NewPass/NewPassContainer.tsx","ui/PageNotFound/PageNotFound.tsx","api/restorePassAPI.ts","bll/restorePas-reducer.ts","ui/Profile/Profile.tsx","ui/Profile/ProfileContainer.tsx","api/registrationApi.ts","bll/registration-reducer.ts","ui/Registration/Registration.tsx","ui/Registration/RegistrationContainer.tsx","api/resetPassAPI.ts","bll/resetPass-reducer.ts","ui/ResetPass/ResetPassContainer.tsx","ui/RestorePass/RestorePassContainer.tsx","ui/Main/Main.tsx","App.tsx","serviceWorker.ts","bll/newPass-reducer.ts","bll/store.ts","index.tsx"],"names":["module","exports","NavigationLink","props","to","title","instatce","axios","create","baseURL","withCredentials","authAPI","data","post","delete","initialState","isLogged","isLoading","setIsLoggedAC","value","type","setIsLoadingAC","_id","email","name","publicCardPacksCount","NaN","created","updated","verified","rememberMe","error","setupProfileAC","authMeTC","dispatch","then","res","catch","err","setErrorLoginAC","Header","useSelector","state","app","useDispatch","className","style","navigation","onClick","e","message","Loading","src","require","alt","Login","React","memo","isError","login","useEffect","formik","useFormik","initialValues","password","validate","values","errors","test","length","onSubmit","handleSubmit","inputStyle","placeholder","getFieldProps","color","checked","buttonStyle","btn","disabled","LoginContainer","NewPass","newPass","NewPassContainer","newPassword","PageNotFound","exact","path","pageNotFound","instance","restorePassAPI","token","resetPasswordToken","answer","isRestored","restoreSendAC","send","Profile","userInfo","profile","ProfileContainer","ans","restorePassword","registerAPI","isRegistred","Registration","registration","repeatPassword","RegistrationContainer","resetPassAPI","from","isReseted","changeResetAnswerAC","text","ResetPassContainer","resetPassword","info","console","log","resetPass","onChange","handleChange","RestorePassContainer","useParams","secondPassword","restorePassTC","restorePass","textAlign","Main","render","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","unregister"],"mappings":"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","file":"static/js/main.b026ef11.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputStyle\":\"Input_inputStyle__2QB-t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__3fIXd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registration\":\"Registration_registration__2o_uK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigation\":\"Header_navigation__2mGBP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__3zKks\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPass\":\"NewPass_newPass__2mSUO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNotFound\":\"PageNotFound_pageNotFound__23x1H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3wQK-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"resetPass\":\"ResetPass_resetPass__BjB4R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"restorePass\":\"RestorePass_restorePass__2Zutx\"};","module.exports = __webpack_public_path__ + \"static/media/Spinner.59a3b4e6.svg\";","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ntype NavigationLinkPropsType = {\r\n\tto: string,\r\n\ttitle: string\r\n}\r\n\r\nconst NavigationLink = (props: NavigationLinkPropsType) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<NavLink to={props.to}>{props.title}</NavLink>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default NavigationLink;","import axios from 'axios'\r\nimport {LoginParamsType} from \"../bll/login-reducer\";\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true\r\n}\r\n\r\nconst instatce = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    // baseURL: 'http://localhost:7542/2.0',\r\n    ...settings\r\n})\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instatce.post('/auth/login', data)\r\n    },\r\n\r\n    authMe() {\r\n        return instatce.post('/auth/me', {})\r\n    },\r\n    logout() {\r\n        return instatce.delete('/auth/me', {})\r\n    }\r\n}\r\n","\r\nconst initialState: AppStateType = {\r\n    isLogged: false,\r\n    isLoading: false\r\n}\r\n\r\nexport const appReducer = (state: AppStateType = initialState, action: ActionsType): AppStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGGED\":\r\n            return {...state, isLogged: action.value}\r\n        case \"login/SET-IS-LOADING\":\r\n            return {...state, isLoading: action.value}\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n// TYPES\r\nexport type AppStateType = {\r\n    isLogged: boolean\r\n    isLoading: boolean\r\n}\r\n\r\nexport type ActionsType =\r\n    | ReturnType<typeof setIsLoggedAC>\r\n    | ReturnType<typeof setIsLoadingAC>;\r\n\r\n\r\n// ACTIONS CREATORS\r\n\r\nexport const setIsLoggedAC = (value: boolean) => {\r\n    return {type: 'login/SET-IS-LOGGED', value} as const\r\n}\r\n\r\nexport const setIsLoadingAC = (value: boolean) => {\r\n    return {type: 'login/SET-IS-LOADING', value} as const\r\n}\r\n\r\n// THUNKS\r\n","import {authAPI} from \"../api/cardsAPI\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setIsLoadingAC, setIsLoggedAC} from \"./app-reducer\";\r\n\r\nexport type ProfileStateType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date | null\r\n    updated: Date | null\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error: string\r\n}\r\n\r\nexport type ActionsType =\r\n    | ReturnType<typeof setupProfileAC>\r\n    | ReturnType<typeof setIsLoadingAC>\r\n    | ReturnType<typeof setIsLoggedAC>;\r\n\r\nconst initialState: ProfileStateType = {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    publicCardPacksCount: NaN,\r\n    created: null,\r\n    updated: null,\r\n    verified: false,\r\n    rememberMe: false,\r\n    error: ''\r\n}\r\n\r\nexport const profileReducer = (state: ProfileStateType = initialState, action: ActionsType): ProfileStateType => {\r\n    switch (action.type) {\r\n        case 'profile/SET-UP-PROFILE':\r\n            return {...state, ...action.data}\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n//Actions Creators\r\nexport const setupProfileAC = (data: ProfileStateType) => {\r\n    return {type: 'profile/SET-UP-PROFILE', data} as const\r\n}\r\n\r\n// Thunks\r\nexport const authMeTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setIsLoadingAC(true))\r\n    authAPI.authMe()\r\n        .then(res => {\r\n            dispatch(setIsLoadingAC(false))\r\n            dispatch(setupProfileAC(res.data))\r\n            dispatch(setIsLoggedAC(true))\r\n        })\r\n        .catch(err => {\r\n            dispatch(setIsLoadingAC(false))\r\n        })\r\n}\r\n\r\n\r\n// Types\r\n","import {authAPI} from \"../api/cardsAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setupProfileAC} from \"./profile-reducer\";\r\nimport {setIsLoadingAC, setIsLoggedAC} from \"./app-reducer\";\r\n\r\nlet initialState: LoginStateType = {\r\n    isLogged: false,\r\n    error: ''\r\n}\r\n\r\nexport const loginReducer = (state: LoginStateType = initialState, action: ActionsType): LoginStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-ERROR-LOGIN':\r\n            return {...state, error: action.error}\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//Actions Creators\r\nconst setErrorLoginAC = (error: string) => {\r\n    return {type: 'login/SET-ERROR-LOGIN', error} as const\r\n}\r\n\r\n\r\n// Thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setIsLoadingAC(true))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            dispatch(setIsLoadingAC(false))\r\n            dispatch(setupProfileAC(res.data))\r\n            dispatch(setIsLoggedAC(true))\r\n        })\r\n        .catch(e => {\r\n            dispatch(setIsLoadingAC(false))\r\n            dispatch(setErrorLoginAC(e.message))\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setIsLoadingAC(true))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            dispatch(setIsLoadingAC(false))\r\n            dispatch(setIsLoggedAC(false))\r\n        })\r\n        .catch(e => {\r\n            dispatch(setIsLoadingAC(false))\r\n            dispatch(setErrorLoginAC(e.message))\r\n        })\r\n}\r\n\r\n\r\n// Types\r\n\r\nexport type LoginStateType = {\r\n    isLogged: boolean\r\n    error: string\r\n}\r\n\r\n\r\nexport type ActionsType =\r\n    | ReturnType<typeof setIsLoggedAC>\r\n    | ReturnType<typeof setErrorLoginAC>\r\n    | ReturnType<typeof setupProfileAC>\r\n    | ReturnType<typeof setIsLoadingAC>;\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n","import React from 'react';\r\nimport NavigationLink from '../Common/NavigationLink/NavigationLink';\r\nimport {login, logout, newPass, profile, registration, resetPass, restorePass} from '../Routes/routes';\r\nimport style from './Header.module.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\nimport {logoutTC} from \"../../bll/login-reducer\";\r\n\r\n\r\nconst Header = () => {\r\n\t\r\n    const isLogged = useSelector<AppRootStateType, boolean>(state => state.app.isLogged)\r\n    const dispatch = useDispatch()\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    return (\r\n        <nav className={style.navigation}>\r\n            {isLogged ? <button onClick={logoutHandler}>Logout</button> : <NavigationLink to={login} title={\"Login\"}/>}\r\n            <NavigationLink to={newPass} title={\"New password\"}/>\r\n            <NavigationLink to={restorePass} title={\"Restore password\"}/>\r\n            <NavigationLink to={profile} title={\"Profile\"}/>\r\n            <NavigationLink to={resetPass} title={\"Reset password\"}/>\r\n            <NavigationLink to={registration} title={\"Registration\"}/>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","export const login: string = '/login';\r\nexport const logout: string = '/logout';\r\nexport const newPass: string = '/newPassword';\r\nexport const profile: string = '/profile';\r\nexport const restorePass: string = '/restorePassword';\r\nexport const registration: string = '/registration';\r\nexport const resetPass: string = '/resetPassword'\r\n// export const pageNotFound: string = '/pageNotFound_404';\r\n","import React from \"react\";\r\n\r\nexport const Loading = () => {\r\n    return (\r\n        <div>\r\n            <img src={require('./img/Spinner.svg')} alt=\"spinner loading\"/>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport style from './Login.module.css';\r\nimport inputStyle from '../Common/Input/Input.module.css'\r\nimport buttonStyle from '../Common/Button/Button.module.css'\r\nimport { useFormik } from \"formik\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loginTC } from \"../../bll/login-reducer\";\r\nimport { AppRootStateType } from \"../../bll/store\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport { authMeTC } from \"../../bll/profile-reducer\";\r\nimport { Loading } from \"../Common/Loading/Loading\";\r\n\r\ntype LoginPropType = any\r\n\r\nconst Login = React.memo((props: LoginPropType) => {\r\n\tconst isLogged = useSelector<AppRootStateType, boolean>(state => state.app.isLogged)\r\n\tconst isError = useSelector<AppRootStateType, string>(state => state.login.error)\r\n\tconst isLoading = useSelector<AppRootStateType, boolean>(state => state.app.isLoading)\r\n\tconst dispatch = useDispatch()\r\n\tuseEffect(() => {\r\n\t\tdispatch(authMeTC())\r\n\t}, [])\r\n\r\n\ttype FormikErrorType = {\r\n\t\temail?: string,\r\n\t\tpassword?: string\r\n\t}\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: '',\r\n\t\t\tpassword: '',\r\n\t\t\trememberMe: false\r\n\t\t},\r\n\t\tvalidate: (values) => {\r\n\t\t\tconst errors: FormikErrorType = {};\r\n\r\n\t\t\tif (!values.email) {\r\n\t\t\t\terrors.email = \"Requires\"\r\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n\t\t\t\terrors.email = \"Invalid email adress\"\r\n\t\t\t}\r\n\r\n\t\t\tif (!values.password) {\r\n\t\t\t\terrors.password = 'Required';\r\n\t\t\t} else if (values.password.length < 7) {\r\n\t\t\t\terrors.password = 'Password must be equal or more than 7 characters';\r\n\t\t\t}\r\n\t\t\treturn errors;\r\n\t\t},\r\n\t\tonSubmit: values => {\r\n\t\t\tdispatch(loginTC(values))\r\n\t\t}\r\n\t})\r\n\r\n\tif (isLogged) return <Redirect to={'/profile'} />\r\n\r\n\treturn (\r\n\t\t<div className={style.login}>\r\n\t\t\t{ isLoading && <Loading />}\r\n\t\t\t<h2>Login Page</h2>\r\n\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<input className={inputStyle.inputStyle}\r\n\t\t\t\t\t\tname={'email'}\r\n\t\t\t\t\t\ttype={'text'}\r\n\t\t\t\t\t\tplaceholder={'E-mail'}\r\n\t\t\t\t\t\t{...formik.getFieldProps('email')}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{formik.values.email ? <div style={{ color: \"red\" }}>\r\n\t\t\t\t\t\t{formik.errors.email}\r\n\t\t\t\t\t</div> : null}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<input className={inputStyle.inputStyle}\r\n\t\t\t\t\t\tname={'password'}\r\n\t\t\t\t\t\ttype={'password'}\r\n\t\t\t\t\t\tplaceholder={'Password'}\r\n\t\t\t\t\t\t{...formik.getFieldProps('password')}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{formik.values.password ? <div style={{ color: 'red' }}>\r\n\t\t\t\t\t\t{formik.errors.password}\r\n\t\t\t\t\t</div> : null}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<span>Remember Me </span>\r\n\t\t\t\t\t<input type={'checkbox'}\r\n\t\t\t\t\t\t{...formik.getFieldProps('rememberMe')}\r\n\t\t\t\t\t\tchecked={formik.values.rememberMe}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button className={buttonStyle.btn}\r\n\t\t\t\t\t\ttype={'submit'}\r\n\t\t\t\t\t\tdisabled={isLoading}\r\n\t\t\t\t\t>Login\r\n                    </button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t\t<div>\r\n\t\t\t\t{/*<Input value={'Choose the dark side'} onChange={(text: string) => console.log(text)}/>*/}\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t{/*<Button text={'we have cookies!:)'} onClick={() => alert('You have chosen wisely')} />*/}\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t{isError && <div> ${isError} </div>}\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t)\r\n})\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { LoginStateType } from '../../bll/login-reducer';\r\nimport { AppRootStateType } from '../../bll/store';\r\nimport Login from './Login';\r\n\r\nconst LoginContainer = () => {\r\n\r\n\tconst login = useSelector<AppRootStateType, LoginStateType>(state => state.login);\r\n\tconst dispatch = useDispatch();\r\n\r\n\treturn (\r\n\t\t<Login />\r\n\t)\r\n}\r\n\r\nexport default LoginContainer;","import React from 'react';\r\nimport style from './NewPass.module.css';\r\n\r\ntype NewPassPropsType = any;\r\n\r\nconst NewPass = (props: NewPassPropsType) => {\r\n\treturn (\r\n\t\t<div className={style.newPass}>\r\n\t\t\t<h2>New Password Page</h2>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default NewPass;","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { NewPassStateType } from '../../bll/newPass-reducer';\r\nimport { AppRootStateType } from '../../bll/store';\r\nimport NewPass from './NewPass';\r\n\r\nconst NewPassContainer = () => {\r\n\r\n\tconst newPass = useSelector<AppRootStateType, NewPassStateType>(state => state.newPassword);\r\n\tconst dispatch = useDispatch();\r\n\r\n\treturn (\r\n\t\t<NewPass />\r\n\t)\r\n}\r\n\r\nexport default NewPassContainer;","import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport style from './PageNotFound.module.css';\r\n\r\nconst PageNotFound = () => {\r\n\r\n\tif (<Route exact path={'/'} />) {\r\n\t\treturn <Redirect to={'/login'} />\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={style.pageNotFound}>\r\n\t\t\t<h2>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<span>PAGE NOT FOUND</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<span>404 ERROR!</span>\r\n\t\t\t\t</div>\r\n\t\t\t</h2>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default PageNotFound;","import axios from 'axios';\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true\r\n}\r\n\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n\t// baseURL: 'http://localhost:7542/2.0/',\r\n\t...settings\r\n});\r\n\r\nexport const restorePassAPI = {\r\n\trestorePass(password: string, token: string) {\r\n\t\t// debugger;\r\n\t\treturn instance.post('auth/set-new-password', {\r\n            password: password,\r\n            resetPasswordToken: token\r\n\t\t})\r\n\t},\r\n}\r\n","import { Dispatch } from \"redux\";\r\nimport { restorePassAPI } from \"../api/restorePassAPI\";\r\nimport {setIsLoadingAC} from \"./app-reducer\";\r\n\r\nexport type RestorePassStateType = {\r\n\tanswer: string,\r\n\tisRestored: boolean\r\n}\r\n\r\ntype ChangeRestoreAnswerActionType = {\r\n\ttype: 'restore/CHANGE-ANSWER',\r\n\tanswer: string,\r\n}\r\ntype isRestoredActionType = {\r\n\ttype: 'restore/CHANGE-STATUS',\r\n\tisRestored: boolean,\r\n}\r\n\r\nexport type ActionsType = ChangeRestoreAnswerActionType | isRestoredActionType;\r\n\r\nconst initialState: RestorePassStateType = {\r\n\tanswer: '',\r\n\tisRestored: false\r\n};\r\n\r\nexport const restorePasswordReducer = (state: RestorePassStateType = initialState, action: ActionsType): RestorePassStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase \"restore/CHANGE-ANSWER\": {\r\n\t\t\treturn { ...state, answer: action.answer }\r\n\t\t}\r\n\t\tdefault: {\r\n\t\t\treturn state\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//actions\r\n\r\nexport const changeRestoreAnswerAC = (text: string): ChangeRestoreAnswerActionType => {\r\n\treturn { type: \"restore/CHANGE-ANSWER\", answer: text }\r\n}\r\n\r\nexport const restoreSendAC = (send: boolean): isRestoredActionType => {\r\n\treturn { type: \"restore/CHANGE-STATUS\", isRestored: send }\r\n}\r\n\r\n//thunk\r\nexport const restorePassTC = (password: string, token: string) => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t\tdispatch(setIsLoadingAC(true))\r\n\t\trestorePassAPI.restorePass(password, token)\r\n\t\t\t.then(res => {\r\n\t\t\t\tdispatch(setIsLoadingAC(false))\r\n\t\t\t\tdispatch(changeRestoreAnswerAC(res.data.info));\r\n\t\t\t\tdispatch(restoreSendAC(true))\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tdispatch(setIsLoadingAC(false))\r\n\t\t\t\tconsole.log(err.error);\r\n\t\t\t})\r\n\t}\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport style from './Profile.module.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {authMeTC, ProfileStateType} from \"../../bll/profile-reducer\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport {Loading} from \"../Common/Loading/Loading\";\r\n\r\ntype ProfilePropsType = any\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    const isLogged = useSelector<AppRootStateType, boolean>(state => state.app.isLogged)\r\n    const userInfo = useSelector<AppRootStateType, ProfileStateType>(state => state.profile)\r\n    const isLoading = useSelector<AppRootStateType, boolean>(state => state.app.isLoading)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(authMeTC())\r\n    }, [])\r\n\r\n    if (!isLogged) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.profile}>\r\n            { isLoading && <Loading/> }\r\n            {/*<h2>Profile Page</h2>*/}\r\n            <div>Email: {userInfo.email}</div>\r\n            <div>Name: {userInfo.name}</div>\r\n            <div>Created: {userInfo.created}</div>\r\n            <div>publicCardPacksCount: {userInfo.publicCardPacksCount}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { restoreSendAC } from '../../bll/restorePas-reducer';\r\nimport { AppRootStateType } from '../../bll/store';\r\nimport Profile from './Profile';\r\n\r\nconst ProfileContainer = () => {\r\n\r\n\tconst isRestored = useSelector<AppRootStateType, boolean>(ans => ans.restorePassword.isRestored); \r\n\tconst dispatch = useDispatch();\r\n\r\n\tif(isRestored) dispatch(restoreSendAC(false))\r\n\r\n\treturn (\r\n\t\t<Profile />\r\n\t)\r\n}\r\n\r\nexport default ProfileContainer;","import axios from 'axios';\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    // baseURL: 'http://localhost:7542/2.0/',\r\n    ...settings\r\n});\r\n\r\ntype RegistrationResponse = {\r\n    error: string,\r\n    method: string,\r\n    url: string,\r\n    query: {},\r\n    body: {}\r\n}\r\n\r\nexport type RegistrationParamsType = {\r\n    email: string,\r\n    password: string\r\n}\r\n\r\nexport const registerAPI = {\r\n    registration<RegistrationResponse>(data: RegistrationParamsType) {\r\n        return instance.post('auth/register', {\r\n            email: data.email,\r\n            password: data.password\r\n        })\r\n    },\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {registerAPI, RegistrationParamsType} from \"../api/registrationApi\";\r\nimport {setIsLoadingAC} from \"./app-reducer\";\r\n\r\nexport type RegistrationStateType = any\r\n\r\nexport type ActionsType = any;\r\n\r\nconst initialState: RegistrationStateType = {\r\n    isRegistred: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const registrationReducer = (state: RegistrationStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'CREATE-REGISTRATION': {\r\n            return {...state, isRegistred: action.value}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n// actions\r\nexport const registrationAC = (value: boolean) =>\r\n    ({type: 'CREATE-REGISTRATION', value} as const)\r\n\r\n// thunks\r\nexport const registrationTC = (data: RegistrationParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setIsLoadingAC(true))\r\n    registerAPI.registration(data)\r\n        .then(res => {\r\n                dispatch(setIsLoadingAC(false))\r\n                dispatch(registrationAC(true))\r\n            }\r\n        )\r\n        .catch((err) => {\r\n            dispatch(setIsLoadingAC(false))\r\n        })\r\n}\r\n\r\nexport const test111 = () => () => {\r\n    debugger\r\n}\r\n","import React from 'react';\r\nimport style from './Registration.module.css'\r\nimport inputStyle from \"../Common/Input/Input.module.css\";\r\nimport buttonStyle from \"../Common/Button/Button.module.css\";\r\nimport { useFormik } from \"formik\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStateType } from \"../../bll/store\";\r\nimport { Redirect } from 'react-router-dom'\r\nimport { registrationTC } from \"../../bll/registration-reducer\";\r\nimport {Loading} from \"../Common/Loading/Loading\";\r\n\r\ntype RegistrationPropsType = any\r\n\r\nconst Registration = (props: RegistrationPropsType) => {\r\n\r\n\tconst isRegistred = useSelector<AppRootStateType, boolean>(state => state.registration.isRegistred);\r\n\tconst isLoading = useSelector<AppRootStateType, boolean>(state => state.app.isLoading)\r\n\tconst dispatch = useDispatch()\r\n\r\n\ttype FormikErrorType = {\r\n\t\temail?: string,\r\n\t\tpassword?: string\r\n\t\trepeatPassword?: string\r\n\t}\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: '',\r\n\t\t\tpassword: '',\r\n\t\t\trepeatPassword: ''\r\n\t\t},\r\n\t\tvalidate: (values) => {\r\n\t\t\tconst errors: FormikErrorType = {};\r\n\t\t\tif (!values.email) {\r\n\t\t\t\terrors.email = \"Requires\"\r\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n\t\t\t\terrors.email = \"Invalid email adress\"\r\n\t\t\t}\r\n\r\n\t\t\tif (!values.password) {\r\n\t\t\t\terrors.password = 'Required';\r\n\t\t\t} else if (values.password.length < 7) {\r\n\t\t\t\terrors.password = 'Password must be equal or more than 7 characters';\r\n\t\t\t}\r\n\r\n\t\t\tif (!values.repeatPassword) {\r\n\t\t\t\terrors.repeatPassword = 'Required'\r\n\t\t\t} else if (values.repeatPassword.length < 7) {\r\n\t\t\t\terrors.repeatPassword = 'Password must equal or be more than 7 characters';\r\n\t\t\t}\r\n\r\n\t\t\tif (values.password !== values.repeatPassword) {\r\n\t\t\t\terrors.repeatPassword = 'Password should be the same!'\r\n\t\t\t}\r\n\r\n\t\t\treturn errors;\r\n\t\t},\r\n\t\tonSubmit: values => {\r\n\t\t\tdispatch(registrationTC({ email: values.email, password: values.password }))\r\n\t\t},\r\n\t})\r\n\r\n\r\n\tif (isRegistred) {\r\n\t\treturn <Redirect to={\"/profile\"} />\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={style.registration}>\r\n\t\t\t{ isLoading && <Loading />}\r\n\t\t\t<h2>Registration Page</h2>\r\n\t\t\t<div className={style.login}>\r\n\t\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input className={inputStyle.inputStyle}\r\n\t\t\t\t\t\t\ttype={'text'}\r\n\t\t\t\t\t\t\tplaceholder={'E-mail'}\r\n\t\t\t\t\t\t\tname={'email'}\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('email')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{formik.values.email ? <div style={{ color: \"red\" }}>\r\n\t\t\t\t\t\t\t{formik.errors.email}\r\n\t\t\t\t\t\t</div> : null}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input className={inputStyle.inputStyle}\r\n\t\t\t\t\t\t\ttype={'password'}\r\n\t\t\t\t\t\t\tplaceholder={'Password'}\r\n\t\t\t\t\t\t\tname={'password'}\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('password')} />\r\n\t\t\t\t\t\t{formik.values.password ? <div style={{ color: 'red' }}>\r\n\t\t\t\t\t\t\t{formik.errors.password}\r\n\t\t\t\t\t\t</div> : null}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input className={inputStyle.inputStyle}\r\n\t\t\t\t\t\t\ttype={'password'}\r\n\t\t\t\t\t\t\tplaceholder={'Password'}\r\n\t\t\t\t\t\t\tname={'repeatPassword'}\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('repeatPassword')} />\r\n\t\t\t\t\t\t{formik.values.repeatPassword ? <div style={{ color: 'red' }}>\r\n\t\t\t\t\t\t\t{formik.errors.repeatPassword}\r\n\t\t\t\t\t\t</div> : null}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<button className={buttonStyle.btn}\r\n\t\t\t\t\t\t\ttype={'submit'}\r\n\t\t\t\t\t\t\tdisabled={formik.values.password !== formik.values.repeatPassword}\r\n\t\t\t\t\t\t>Registration\r\n                        </button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Registration;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RegistrationStateType } from '../../bll/registration-reducer';\r\nimport { AppRootStateType } from '../../bll/store';\r\nimport Registration from './Registration';\r\n\r\nconst RegistrationContainer = () => {\r\n\r\n\tconst registration = useSelector<AppRootStateType, RegistrationStateType>(state => state.registration);\r\n\tconst dispatch = useDispatch();\r\n\r\n\treturn (\r\n\t\t<Registration/>\r\n\t)\r\n}\r\n\r\nexport default RegistrationContainer;","import axios from 'axios';\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true\r\n}\r\n\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n\t...settings\r\n});\r\n\r\nexport const resetPassAPI = {\r\n\tresetPass(email: string) {\r\n\t\t// debugger;\r\n\t\treturn instance.post('auth/forgot', {\r\n\t\t\temail: email,\r\n\t\t\tfrom: \"test-front-admin <ai73a@yandex.by>\",\r\n\t\t\tmessage: `<div style=\"background-color: lime; padding: 15px\">\r\n            \tpassword recovery link: \r\n            \t<a href='https://shein92.github.io/cards/#/restorePassword/$token$'>\r\n            \tlink</a></div>`\r\n\t\t})\r\n\t\t// <a href='http://localhost:3000/cards#/restorePassword/$token$'>\r\n\t},\r\n}\r\n","import { resetPassAPI } from '../api/resetPassAPI';\r\nimport { Dispatch } from \"redux\";\r\nimport {setIsLoadingAC} from \"./app-reducer\";\r\n\r\nexport type ResetPassStateType = {\r\n\tanswer: string,\r\n\tisReseted: boolean\r\n}\r\n\r\ntype ChangeAnswerActionType = {\r\n\ttype: \"reset/CHANGE-ANSWER\",\r\n\tanswer: string\r\n}\r\ntype IsResetSentActionType = {\r\n\ttype: \"reset/CHANGE-STATUS\",\r\n\tisReseted: boolean\r\n}\r\n\r\nexport type ActionsType = ChangeAnswerActionType | IsResetSentActionType;\r\n\r\nconst initialState: ResetPassStateType = {\r\n\tanswer: '',\r\n\tisReseted: false\r\n};\r\n\r\nexport const resetPasswordReducer = (state: ResetPassStateType = initialState, action: ActionsType): ResetPassStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase \"reset/CHANGE-ANSWER\": {\r\n\t\t\treturn { ...state, answer: action.answer }\r\n\t\t}\r\n\t\tcase \"reset/CHANGE-STATUS\": {\r\n\t\t\treturn {...state, isReseted: action.isReseted}\r\n\t\t}\r\n\t\tdefault: {\r\n\t\t\treturn state\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//actions\r\nexport const changeResetAnswerAC = (text: string): ChangeAnswerActionType => {\r\n\treturn { type: \"reset/CHANGE-ANSWER\", answer: text }\r\n}\r\nexport const resetSendAC = (send: boolean): IsResetSentActionType => {\r\n\treturn { type: \"reset/CHANGE-STATUS\", isReseted: send }\r\n}\r\n\r\n//thunk\r\nexport const resetPassTC = (email: string) => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t\tdispatch(setIsLoadingAC(true))\r\n\t\tresetPassAPI.resetPass(email)\r\n\t\t\t.then(res => {\r\n\t\t\t\tdispatch(setIsLoadingAC(false))\r\n\t\t\t\tdispatch(changeResetAnswerAC(res.data.info));\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tdispatch(setIsLoadingAC(false))\r\n\t\t\t\tdispatch(changeResetAnswerAC(err.message));\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t})\r\n\t}\r\n}\r\n","import { useFormik } from 'formik';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { resetPassTC } from '../../bll/resetPass-reducer';\r\nimport { AppRootStateType } from '../../bll/store';\r\nimport { profile } from '../Routes/routes';\r\nimport style from './ResetPass.module.css';\r\nimport inputStyle from '../Common/Input/Input.module.css';\r\nimport btn from '../Common/Button/Button.module.css';\r\n\r\nconst ResetPassContainer = React.memo(() => {\r\n\r\n\tlet answer = useSelector<AppRootStateType, string>(ans => ans.resetPassword.answer);\r\n\tlet isReseted = useSelector<AppRootStateType, boolean>(ans => ans.resetPassword.isReseted);\r\n\tlet dispatch = useDispatch();\r\n\r\n\ttype FormikErrorType = {\r\n\t\temail?: string\r\n\t}\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: '',\r\n\t\t},\r\n\t\tvalidate: (values) => {\r\n\t\t\tconst errors: FormikErrorType = {};\r\n\t\t\tif (!values.email) {\r\n\t\t\t\terrors.email = \"Requires\"\r\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n\t\t\t\terrors.email = \"Invalid email adress\"\r\n\t\t\t}\r\n\t\t\treturn errors;\r\n\t\t},\r\n\t\tonSubmit: values => {\r\n\t\t\tdebugger;\r\n\t\t\tdispatch(resetPassTC(values.email));\r\n\t\t},\r\n\t});\r\n\r\n\tif (isReseted) return <Redirect to={profile} />\r\n\r\n\treturn (\r\n\t\t<div className={style.resetPass}>\r\n\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<span>Your email adress: </span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<input className={inputStyle.inputStyle}\r\n\t\t\t\t\tname={'email'}\r\n\t\t\t\t\ttype={\"text\"}\r\n\t\t\t\t\tplaceholder={'E-mail'}\r\n\t\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\t\tvalue={formik.values.email}\r\n\t\t\t\t/>\r\n\t\t\t\t{formik.values.email ? <div style={{ color: \"red\" }}>\r\n\t\t\t\t\t{formik.errors.email}\r\n\t\t\t\t</div> : null}\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button className={btn.btn} \r\n\t\t\t\t\ttype={\"submit\"}>Submit</button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t\t{answer}\r\n\t\t</div>\r\n\t);\r\n})\r\n\r\nexport default ResetPassContainer;","import { useFormik } from 'formik';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect, useParams } from 'react-router-dom';\r\nimport { restorePassTC } from '../../bll/restorePas-reducer';\r\nimport { AppRootStateType } from '../../bll/store';\r\nimport { profile } from '../Routes/routes';\r\nimport style from './RestorePass.module.css';\r\nimport inputStyle from '../Common/Input/Input.module.css';\r\nimport btn from '../Common/Button/Button.module.css';\r\nimport {Loading} from \"../Common/Loading/Loading\";\r\n\r\nconst RestorePassContainer = React.memo(() => {\r\n\r\n\tlet answer = useSelector<AppRootStateType, string>(ans => ans.restorePassword.answer);\r\n\tconst isRestored = useSelector<AppRootStateType, boolean>(ans => ans.restorePassword.isRestored);\r\n\tconst isLoading = useSelector<AppRootStateType, boolean>(state => state.app.isLoading)\r\n\tconst dispatch = useDispatch();\r\n\tlet { token } = useParams();\r\n\r\n\ttype FormikErrorType = {\r\n\t\tpassword?: string\r\n\t\tsecondPassword?: string\r\n\t}\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\tpassword: '',\r\n\t\t\tsecondPassword: ''\r\n\t\t},\r\n\t\tvalidate: (values) => {\r\n\t\t\tconst errors: FormikErrorType = {};\r\n\r\n\t\t\tif (!values.password) {\r\n\t\t\t\terrors.password = 'Required';\r\n\t\t\t} else if (values.password.length < 7) {\r\n\t\t\t\terrors.password = 'Password must be equal or more than 7 characters';\r\n\t\t\t}\r\n\r\n\t\t\tif (!values.secondPassword) {\r\n\t\t\t\terrors.secondPassword = 'Required'\r\n\t\t\t} else if (values.secondPassword.length < 7) {\r\n\t\t\t\terrors.secondPassword = 'Password must be equal or more than 7 characters';\r\n\t\t\t}\r\n\r\n\t\t\tif (values.password !== values.secondPassword) {\r\n\t\t\t\terrors.secondPassword = 'Password should be the same!'\r\n\t\t\t}\r\n\r\n\t\t\treturn errors;\r\n\t\t},\r\n\t\tonSubmit: values => {\r\n\t\t\tdispatch(restorePassTC(values.password, token))\r\n\t\t}\r\n\t});\r\n\r\n\tif (isRestored) { return <Redirect to={profile} /> }\r\n\r\n\treturn (\r\n\t\t<div className={style.restorePass} style={{ textAlign: 'center' }}>\r\n\t\t\t{ isLoading && <Loading />}\r\n\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<span>Password: </span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<input className={inputStyle.inputStyle}\r\n\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\tname={\"password\"}\r\n\t\t\t\t\t\tplaceholder={'Password'}\r\n\t\t\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\t\t\tvalue={formik.values.password}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{formik.values.password ? <div style={{ color: 'red' }}>\r\n\t\t\t\t\t\t{formik.errors.password}\r\n\t\t\t\t\t</div> : null}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<span>Repeat password</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<input className={inputStyle.inputStyle}\r\n\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\tname={\"secondPassword\"}\r\n\t\t\t\t\t\tplaceholder={'Password'}\r\n\t\t\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\t\t\tvalue={formik.values.secondPassword}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{formik.values.secondPassword ? <div style={{ color: 'red' }}>\r\n\t\t\t\t\t\t{formik.errors.secondPassword}\r\n\t\t\t\t\t</div> : null}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button className={btn.btn}\r\n\t\t\t\t\t\ttype={\"submit\"}\r\n\t\t\t\t\t\tdisabled={formik.values.password !== formik.values.secondPassword}\r\n\t\t\t\t\t>Send</button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t\t<div>\r\n\t\t\t\t{answer}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n\r\n\t// return (\r\n\t// \t<RestorePass/>\r\n\t// )\r\n})\r\n\r\nexport default RestorePassContainer;\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Header from '../Header/Header';\r\nimport LoginContainer from '../Login/LoginContainer';\r\nimport NewPassContainer from '../NewPass/NewPassContainer';\r\nimport PageNotFound from '../PageNotFound/PageNotFound';\r\nimport ProfileContainer from '../Profile/ProfileContainer';\r\nimport RegistrationContainer from '../Registration/RegistrationContainer';\r\nimport ResetPassContainer from '../ResetPass/ResetPassContainer';\r\nimport RestorePassContainer from '../RestorePass/RestorePassContainer';\r\nimport { login, newPass, profile, registration, resetPass, restorePass } from '../Routes/routes';\r\n\r\nconst Main = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Header />\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route path={login} render={() => <LoginContainer />} />\r\n\t\t\t\t<Route path={newPass} render={() => <NewPassContainer />} />\r\n\t\t\t\t<Route path={restorePass + '/:token'} render={() => <RestorePassContainer />} />\r\n\t\t\t\t<Route path={resetPass} render={() => <ResetPassContainer/>}/>\r\n\t\t\t\t<Route path={profile} render={() => <ProfileContainer />} />\r\n\t\t\t\t<Route path={registration} render={() => <RegistrationContainer />} />\r\n\t\t\t\t<Route render={() => <PageNotFound/>}/>\r\n\t\t\t</Switch>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\n\timport './App.css';\nimport Main from './ui/Main/Main';\n\nconst App = () => {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{/* hashRouter, provider */}\n\t\t\t<HashRouter>\n\t\t\t\t<Main/>\n\t\t\t</HashRouter>\n\t\t</div>\n\t);\n}\n\n\n//{/* <Header/> */}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type NewPassStateType = any\r\n\r\nexport type ActionsType = any;\r\n\r\nconst initialState = {}\r\n\r\nexport const newPasswordReducer = (state: NewPassStateType = initialState, action: ActionsType): NewPassStateType => {\r\n\tswitch(action.type) {\r\n\t\tdefault: {\r\n\t\t\treturn state\r\n\t\t}\r\n\t}\r\n}","import { restorePasswordReducer } from './restorePas-reducer';\r\nimport { registrationReducer } from './registration-reducer';\r\nimport { profileReducer } from './profile-reducer';\r\nimport { newPasswordReducer } from './newPass-reducer';\r\nimport { loginReducer } from './login-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { resetPasswordReducer } from './resetPass-reducer';\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    newPassword: newPasswordReducer,\r\n    profile: profileReducer,\r\n    registration: registrationReducer,\r\n    restorePassword: restorePasswordReducer,\r\n    resetPassword: resetPasswordReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport { store } from './bll/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}